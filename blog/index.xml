<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>composer updateでUndefined indexエラー on プログラマー備忘録</title>
    <link>https://sankame.github.io/blog/index.xml</link>
    <description>Recent content in composer updateでUndefined indexエラー on プログラマー備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [hugo-theme-wave](https://github.com/syui/hugo-theme-wave).</copyright>
    <lastBuildDate>Sat, 25 Jun 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sankame.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Let&#39;s Encrypt - ドメイン削除</title>
      <link>https://sankame.github.io/blog/2018-04-30-letsencrypt_delete_domain/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2018-04-30-letsencrypt_delete_domain/</guid>
      <description>

&lt;h1 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;[CentOS] 6.4 (64bit版カーネル)&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;あるドメインが不要になったのでDNSから削除しました。&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s Encryptで証明書を発行していたドメインだったので、証明書の更新時に下記エラーが出るようになりました。&lt;/p&gt;

&lt;p&gt;(&amp;ldquo;example.net&amp;rdquo;は読み替えて下さい)&lt;/p&gt;

&lt;p&gt;それ以外のドメインについては成功メッセージが出ているにも関わらず、ブラウザで確認すると証明書が更新されず、困りました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;1 renew failure(s), 0 parse failure(s)
IMPORTANT NOTES:
    - The following errors were reported by the server:
    Domain: example.net
    Type:   None
    Detail: DNS problem: NXDOMAIN looking up A for example.net
Automated renewal failed
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下記ディレクトリとファイルを撤去することでエラーは出なくなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;# mv /etc/letsencrypt/live/example.net/ /tmp/

# mv /etc/letsencrypt/renewal/example.net.conf /tmp/
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>regファイルでvbscriptを有効にする</title>
      <link>https://sankame.github.io/blog/2018-01-17-enable_vbscript/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2018-01-17-enable_vbscript/</guid>
      <description>

&lt;h1 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;[OS] Windows 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Windows UpdateしたらIE11でvbscriptが動かなくなりました。&lt;/p&gt;

&lt;p&gt;おそらくバージョン1709から。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;バージョンはWindows左下のボックスでwinverと入力すると表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/enable_vbscript/winver.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;60%&#34; height=&#34;60%&#34; title=&#34;winver&#34; alt=&#34;winver&#34; src=&#34;https://sankame.github.io/assets/posts/img/enable_vbscript/winver.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;前から予告されてたみたいですが、急に来た感が否めません。&lt;/p&gt;

&lt;p&gt;僕みたいにレガシーシステムの保守をしてて困った人はいるのでは？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MicroSoft(以下MS)の下記ページに従ってグループポリシーの値を変えたら、vbscriptが有効になりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://support.microsoft.com/ja-jp/help/4012494/option-to-disable-vbscript-execution-in-internet-explorer-for-internet&#34; target=&#34;_blank&#34;&gt;Internet Explorer のインターネット ゾーンおよび制限付きサイト ゾーン内の VBScript の実行を無効にするオプション&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;もっと簡単な操作で変更したかったので、GUIではなく、同ページ内のレジストリファイルでのやり方を試しました。&lt;/p&gt;

&lt;p&gt;ここでハマってしまい、いろいろ調べた結果、&lt;a href=&#34;http://bruteforcemahjong.seesaa.net/article/440113523.html&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;のおかげで解決できました。&lt;/p&gt;

&lt;p&gt;上記MSページのレジストリパスが違っていることが原因でした・・・&lt;/p&gt;

&lt;p&gt;こちらのファイルをWindows上の適当な場所に置いてダブルクリックするとvbscriptが有効になります。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/d531c4fe1af0c987cf71827e0a25b523.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;他にも調べたら、&lt;a href=&#34;https://getadmx.com/?Category=Windows_10_2016&amp;Policy=Microsoft.Policies.InternetExplorer::IZ_PolicyAllowVBScript_3&amp;Language=ja-jp&#34; target=&#34;_blank&#34;&gt;正しいレジストリパスを書いたページ&lt;/a&gt;がありました。&lt;/p&gt;

&lt;p&gt;うーん、MS本家が間違ってるってどういうことなんだろう？&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (38)</title>
      <link>https://sankame.github.io/blog/2017-11-20-fail_to_connect_mysql/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-11-20-fail_to_connect_mysql/</guid>
      <description>

&lt;h1 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[MySQL] 5.7.20
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MacにMySQLをインストール後、接続しようとするとエラーが出ました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew install mysql

$ mysql -uroot
ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (38)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ネットの情報をヒントに、エラーが出ているファイルの所有者を変えたら直りました。(ログインユーザー名は読み替えて下さい)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ll /tmp/mysql.sock
-rw-r--r--  1 root  wheel  0 11 19 23:46 /tmp/mysql.sock

$ sudo chown [ログインユーザー名] /tmp/mysql.sock
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;念のためリスタート。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ brew services restart mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;接続できました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ mysql -uroot
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Androidアプリ開発】onPrepareActionModeが呼ばれない</title>
      <link>https://sankame.github.io/blog/2017-10-17-android_onprepareactionmode_not_called/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-10-17-android_onprepareactionmode_not_called/</guid>
      <description>

&lt;h2 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[Windows] 7
[Java] 1.8
[Android] 5.1.1
[Android API] 26
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;build.gradleで下記の値を上げたところ、onPrepareActionModeが実行されなくなってました。&lt;/p&gt;

&lt;p&gt;onPrepareActionModeは、ListViewのロングタップ時にアクションモードへ切り替えた後、アクションバー内のあるアイコンを隠す処理で使っていたので、困りました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;compileSdkVersion : 21 → 26&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;buildToolsVersion : 21.1.2 → 26.0.2&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;試しに下記 (A) にあった処理を (B) へ移してみたところ、思った通りの動きをしてくれました。&lt;/p&gt;

&lt;p&gt;うーん、前はダメだったからonPrepareActionModeを使ったんだけどなあ。。&lt;/p&gt;

&lt;p&gt;他にネットで情報を見つけられなかったので、一旦これにしておくか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;list1 = findViewById(R.id.listView1);

list1.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {

    @Override
    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {
        //(A)
        //MenuItem menuItem1 = menu.findItem(R.id.menu_item1);
        //menuItem1.setVisible(false);
        return false;
    }

    @Override
    public boolean onCreateActionMode(ActionMode mode, Menu menu) {
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.menu_action_mode, menu);

        //(B)
        MenuItem menuItem1 = menu.findItem(R.id.menu_item1);
        menuItem1.setVisible(false);

        return true;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Androidアプリ開発】ライブラリ追加時にビルドエラー</title>
      <link>https://sankame.github.io/blog/2017-10-13-android_duplicate_files_error/</link>
      <pubDate>Fri, 13 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-10-13-android_duplicate_files_error/</guid>
      <description>

&lt;h2 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;[Windows] 7
[Java] 1.8
[Android] 5.1.1
[Android API] 21
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;1-エラー内容&#34;&gt;1. エラー内容&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;commons-langを使いたくなったので下記のように追記してビルドしたら、エラーが発生しました。 (文中の【】は読み替えて下さい)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(アプリルート)/mobile/build.gradle&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;dependencies {
    compile &#39;【他のライブラリ】&#39;
    compile &#39;【他のライブラリ】&#39;
    compile &#39;【他のライブラリ】&#39;
    compile &#39;org.apache.commons:commons-lang3:3.4&#39;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;エラー&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Error:duplicate files during packaging of APK C:\【パス】\mobile-debug-unaligned.apk
Path in archive: META-INF/LICENSE.txt
Origin 1: C:\【パス】\commons-cli-1.2.jar
Origin 2: C:\【パス】\commons-lang3-3.4.jar
You can ignore those files in your build.gradle:
android {
packagingOptions {
    exclude &#39;META-INF/LICENSE.txt&#39;
}
}
Error:Execution failed for task &#39;:mobile:packageDebug&#39;.
&amp;gt; Duplicate files copied in APK META-INF/LICENSE.txt
File 1: C:\【パス】\commons-cli-1.2.jar
File 2: C:\【パス】\commons-lang3-3.4.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-解決方法&#34;&gt;2. 解決方法&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;apkを作る際、複数のjarから、META-INFフォルダに同名のファイルを書き込もうとしてエラーになっているようです。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;エラーメッセージの通り、build.gradle内でLICENSE.txtの除外を指定したら解消しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(アプリルート)/mobile/build.gradle&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply plugin: &#39;com.android.application&#39;

android {
    compileSdkVersion 【バージョン】
    buildToolsVersion 【バージョン】
    //エラーが起きたファイルをここに追記。
    packagingOptions {
        exclude &#39;META-INF/LICENSE.txt&#39;
        exclude &#39;META-INF/NOTICE.txt&#39;
    }
    defaultConfig {
        //省略
    }
    buildTypes {
        release {
            //省略
        }
    }
}

//以下省略
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ちなみにapk内のMETA-INFOフォルダを確認するには、拡張子apkをzipに変えた後、解凍ソフトでapkを展開して下さい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Androidアプリ開発】「次回から表示しない」ボタン</title>
      <link>https://sankame.github.io/blog/2017-10-03-android_handling_dialog_using_preference/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-10-03-android_handling_dialog_using_preference/</guid>
      <description>

&lt;h2 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;[Android] 5.1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[Android API] 21&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-preferenceで実装&#34;&gt;1. Preferenceで実装&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Preferenceを使ってダイアログに「次回から表示しない」ボタンをつける方法をメモ。&lt;/p&gt;

&lt;p&gt;ユーザーに1回だけ何かを伝えたい場合を想定しています。&lt;/p&gt;

&lt;p&gt;(MainActivity.thisなど、適宜読み替えて下さい)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/9ec48534fad7d8663305f6d9681128b0.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-stethoでpreferenceを編集&#34;&gt;2. stethoでPreferenceを編集&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;開発中にPreferenceの値を変えたり、消したりしたくなると思いますが、そんな時はstethoが便利です。&lt;/p&gt;

&lt;p&gt;stethoを起動し、[Local Storage]で該当のActivityを選択すると右側にPreferenceの値(上記コード17行目)が出ます。&lt;/p&gt;

&lt;p&gt;右クリックで編集や削除が可能です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_handling_dialog_using_preference/stetho.jpg&#34; target=&#34;_blank&#34;&gt;
&lt;img width=&#34;80%&#34; height=&#34;80%&#34; title=&#34;stethoで編集&#34; alt=&#34;stethoで編集&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_handling_dialog_using_preference/stetho.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;stethoの設定方法は下記記事の「4. stetho 利用」を参照して下さい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関連記事&#34;&gt;関連記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sankame.github.io/blog/2017-05-14-view_sqlite_on_android/&#34; target=&#34;_blank&#34;&gt;AndroidのSQLite DBを参照&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Androidアプリ開発】SQLiteのDB定義を変更する際の注意点</title>
      <link>https://sankame.github.io/blog/2017-09-05-android_sqlite_db_upgrade/</link>
      <pubDate>Tue, 05 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-09-05-android_sqlite_db_upgrade/</guid>
      <description>

&lt;h2 id=&#34;0-環境&#34;&gt;0.環境&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;[Android] 5.1.1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[Android API] 21&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-準備&#34;&gt;1.準備&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Androidアプリ開発で、SQLiteのライブラリを使う際にハマった点をメモ。&lt;/p&gt;

&lt;p&gt;まずコンストラクターでDBを使う準備をします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

class DatabaseHelper extends SQLiteOpenHelper {

    public DatabaseHelper(Context context) {
        super(context, &amp;quot;test.db&amp;quot;, null, 1);

        //(A)既存のDBを消すには下記コードを使用。
        //context.deleteDatabase(&amp;quot;DB name is here.&amp;quot;);
    }
    //以下省略
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;第2引数でDB名を指定するとDBファイルがAndroid端末に作成されます。&lt;/p&gt;

&lt;p&gt;第4引数ではDBバージョンを指定し、DB定義を変える際はこれを1つ上げるようにします。&lt;/p&gt;

&lt;p&gt;(バージョンを下げるとクラッシュするので注意)&lt;/p&gt;

&lt;p&gt;また、開発中にDBを作り直したい場合は、上記(A)で削除しましょう。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-ハマりポイント-ddl記載箇所&#34;&gt;2.ハマりポイント - DDL記載箇所&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;このライブラリは主に使うメソッドが2つあり、DBのバージョンによって下記の通り実行タイミングが異なります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DBファイルが未作成の場合&lt;/code&gt; : &lt;code&gt;onCreate&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;DBファイルが既にある場合(DBバージョン1以上)&lt;/code&gt; : &lt;code&gt;onUpgrade&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ミスりやすいのが、DBバージョン2以降は、onCreateとonUpgradeの両方にDDLを書く必要があるという点です。&lt;/p&gt;

&lt;p&gt;下記のようにusersテーブルがDBバージョン2で追加されたとして、もし、onUpgradeだけに書いてしまうと、DBバージョン1のユーザーにとっては問題ないですが、初期インストールの場合はonCreateしか実行されないため、usersテーブルが作られないことになります。&lt;/p&gt;

&lt;p&gt;なので、DBバージョン2以降に追加するDDLはprivateメソッドに書いて、上記の両メソッドから呼ぶようにしたらいいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onCreate(SQLiteDatabase db) {
    db.beginTransaction();
    try {
        //DBバージョン1でcitiesテーブル作成。
        String ddlCities = &amp;quot;CREATE TABLE IF NOT EXISTS cities (&amp;quot;
                        + &amp;quot;city_id INTEGER PRIMARY KEY AUTOINCREMENT&amp;quot;
                        + &amp;quot;, city_name TEXT&amp;quot;
                        + &amp;quot;);&amp;quot;;
        db.execSQL(ddlCities);

        //DBバージョン2でusersテーブル作成。
        createUsersTable(db);

        db.setTransactionSuccessful();
    } finally {
        db.endTransaction();
    }
}

@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
    db.beginTransaction();
    try {
        //DBバージョン2でusersテーブル作成。
        createUsersTable(db);

        db.setTransactionSuccessful();
    } finally {
        db.endTransaction();
    }
}

private void createUsersTable(SQLiteDatabase db){
    String ddlUsers = &amp;quot;CREATE TABLE IF NOT EXISTS users (&amp;quot;
            + &amp;quot;user_id INTEGER PRIMARY KEY AUTOINCREMENT&amp;quot;
            + &amp;quot;, user_name TEXT NOT NULL&amp;quot;
            + &amp;quot;);&amp;quot;;
    db.execSQL(ddlUsers);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;3-ハマりポイント-特定のdbバージョンのみで実行するddl&#34;&gt;3.ハマりポイント - 特定のDBバージョンのみで実行するDDL&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ネットで調べたところ、onUpgrade内ではバージョンによって実行するDDLを管理することになっています。&lt;/p&gt;

&lt;p&gt;イコールを使っている例をいくつか見かけましたが、実運用に入ると都合が悪いケースがあります。&lt;/p&gt;

&lt;p&gt;例えば、アップデートをしばらく保留にしていたユーザーが、DBバージョンを3から5へ一気に上げた場合、&lt;code&gt;newVersion == 4&lt;/code&gt;と指定していると、そのDDLが実行されないことになります。&lt;/p&gt;

&lt;p&gt;次のようにDBバージョンを範囲で指定しておけば、上記のケースでも、addColumnAgeは実行されるので問題なしです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Override
public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
    db.beginTransaction();
    try {
        //イコールだと問題あり。
        //if(oldVersion == 3 &amp;amp;&amp;amp; newVersion == 4){
        //    addColumnAge(db);
        //}

        //DBバージョン4でAgeカラム追加。
        if(oldVersion &amp;lt;= 3 &amp;amp;&amp;amp; newVersion &amp;gt;= 4){
            addColumnAge(db);
        }

        db.setTransactionSuccessful();
    } finally {
        db.endTransaction();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、上記「2.ハマりポイント」とも関係しますが、&lt;code&gt;addColumnAge(db);&lt;/code&gt;はonCreate内にも追記します。&lt;/p&gt;

&lt;p&gt;onCreateは &lt;code&gt;DBファイルが未作成の場合&lt;/code&gt; 向けなので、oldVersionなどの条件指定は不要です。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;関連記事&#34;&gt;関連記事&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SQLiteを使った開発を楽にするには&lt;a href=&#34;https://sankame.github.io/blog/2017-05-14-view_sqlite_on_android/&#34; target=&#34;_blank&#34;&gt;こちら&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Androidアプリ開発】起動アイコンのタイトルにアプリ名を表示</title>
      <link>https://sankame.github.io/blog/2017-08-21-android_app_set_activity_title/</link>
      <pubDate>Mon, 21 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-08-21-android_app_set_activity_title/</guid>
      <description>

&lt;h2 id=&#34;0-環境&#34;&gt;0.環境&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;[Android] 5.1.1&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;文中、【】内は読み替えて下さい。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;1-問題&#34;&gt;1.問題&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Androidホーム画面の起動アイコンのタイトルをアプリ名にしたくて、下記(3)を追記したのですが変わりません・・・&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AndroidManifest.xml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    package=&amp;quot;【パッケージ名】&amp;quot; &amp;gt;

    &amp;lt;application
        android:allowBackup=&amp;quot;true&amp;quot;
        android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
        android:label=&amp;quot;(1) App Name&amp;quot;
        android:theme=&amp;quot;@style/AppTheme&amp;quot; &amp;gt;
        &amp;lt;activity
            android:name=&amp;quot;.MyActivity&amp;quot;
            android:label=&amp;quot;(2) My Activity&#39;s Title&amp;quot; &amp;gt;
            &amp;lt;intent-filter android:label=&amp;quot;(3) App Name&amp;quot;&amp;gt;
                &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;

                &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
            &amp;lt;/intent-filter&amp;gt;
        &amp;lt;/activity&amp;gt;
    &amp;lt;/application&amp;gt;

&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ネットで調べたところ、Android 5.1.1 だと(3)が無視され、下図のように起動アイコンにも(2)が表示されてしまうようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_app_set_activity_title/before1.png&#34; target=&#34;_blank&#34;&gt;
&lt;img width=&#34;20%&#34; height=&#34;20%&#34; title=&#34;変更前・起動アイコン&#34; alt=&#34;変更前・起動アイコン&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_app_set_activity_title/before1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_app_set_activity_title/before2.png&#34; target=&#34;_blank&#34;&gt;
&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;変更前・Activity&#34; alt=&#34;変更前・Activity&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_app_set_activity_title/before2.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まず&amp;rdquo;AndroidManifest.xml&amp;rdquo;では、Activityのlabelを下記(3)に変更することで、起動アイコンはアプリ名になります。(intent-filterのlabel指定はやめる)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;そのままだと、Activityのタイトルもアプリ名になってしまうため、起動時にタイトルを書き換えることにしました。(下記 &amp;ldquo;MyActivity.java&amp;rdquo; 参照)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AndroidManifest.xml&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
    package=&amp;quot;【パッケージ名】&amp;quot; &amp;gt;

    &amp;lt;application
        android:allowBackup=&amp;quot;true&amp;quot;
        android:icon=&amp;quot;@mipmap/ic_launcher&amp;quot;
        android:label=&amp;quot;(1) App Name&amp;quot;
        android:theme=&amp;quot;@style/AppTheme&amp;quot; &amp;gt;
        &amp;lt;activity
            android:name=&amp;quot;.MyActivity&amp;quot;
            android:label=&amp;quot;(3) App Name&amp;quot; &amp;gt;
            &amp;lt;intent-filter&amp;gt;
                &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot; /&amp;gt;

                &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot; /&amp;gt;
            &amp;lt;/intent-filter&amp;gt;
        &amp;lt;/activity&amp;gt;
    &amp;lt;/application&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;MyActivity.java&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class MyActivity extends ActionBarActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_my);

        // この1行を追記。
        setTitle(&amp;quot;(2) My Activity&#39;s Title&amp;quot;);
    }

    // 以下省略
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;こうすることで、起動アイコンにはアプリ名、Activityには専用のタイトルを表示できました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_app_set_activity_title/after1.png&#34; target=&#34;_blank&#34;&gt;
&lt;img width=&#34;20%&#34; height=&#34;20%&#34; title=&#34;変更後・起動アイコン&#34; alt=&#34;変更後・起動アイコン&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_app_set_activity_title/after1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_app_set_activity_title/after2.png&#34; target=&#34;_blank&#34;&gt;
&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;変更後・Activity&#34; alt=&#34;変更後・Activity&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_app_set_activity_title/after2.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;定数は大体strings.xmlなどのリソースファイルで管理していると思うので、その場合は下記のように記載。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;setTitle(getString(R.string.title_activity_main));
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Java】Listから配列へ変換</title>
      <link>https://sankame.github.io/blog/2017-08-14-java_list_to_array/</link>
      <pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-08-14-java_list_to_array/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0.環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Java] 1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-内容&#34;&gt;1. 内容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;いつも忘れるので、JavaでList型からString型配列へ変換する方法をメモ。&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/9fba3734d8c3c061215221ac8f81aaae.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>AndroidのSQLite DBを参照</title>
      <link>https://sankame.github.io/blog/2017-05-14-view_sqlite_on_android/</link>
      <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-05-14-view_sqlite_on_android/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2017年05月16日&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&#34;0-環境&#34;&gt;0.環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PC側&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[OS]             Windows7 (32bit 版)
[Android Studio] 1.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;スマホ側&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[OS]             Android 5.1.1
[SQLite]         3.8.6.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;1-前提&#34;&gt;1. 前提&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まずSQLiteのデータをファイル形式で保存するよう設定します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例として、SQLiteを操作するライブラリにSQLiteOpenHelperを使用した場合について記載します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;コンストラクタの第二引数でDBファイル名を指定します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(未指定の場合、データはメモリにのみ保持されます)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class DatabaseHelper extends SQLiteOpenHelper {

    public DatabaseHelper(Context context) {
        //DBファイル名を指定。
        super(context, &amp;quot;example.db&amp;quot;, null, 1);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCからAndroid端末にあるSQLiteのDBファイルを見る方法を調べました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;試行錯誤した内容を書いているため、結論だけ知りたい場合は、4まで読み飛ばして下さい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-adb-androidデバッグ用インターフェース-利用&#34;&gt;2. ADB(Androidデバッグ用インターフェース) 利用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ネットを検索して結構あったのが、ADBを使ってSQLiteのDBファイルをAndroid端末からPCへコピーし、その後DBビューワーで参照するというものです。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCでコマンドプロンプトから下記コマンドを実行すると、カレントディレクトリにtarget.db(任意)というファイルができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;C:\Users\【ユーザー名】&amp;gt;adb -d shell &amp;quot;run-as 【アプリケーションID】 cat databases/【DBファイル名】&amp;quot;&amp;gt;target.db
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;【】内は読み替えて下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;【アプリケーションID】: Android Studioの[File]-[Project Structure]-[Flavors]-[Application Id]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;【DBファイル名】: 上記1で指定したファイル名。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Database BrowserやPupSQLiteというビューワーでtarget.dbを開いても、下記エラーが出てレコードが表示されません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;database disk image is malformed&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qiita.com/tsunet111/items/2c21706fd67f5ecb047d&#34; target=&#34;_blank&#34;&gt;この修復方法&lt;/a&gt;を試しましたが次のエラーが出て、上記ビューワーで見てもレコードが0件でした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Error: near line 6: NOT NULL constraint failed: 【テーブル名】.【カラム名】
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Android(Linux系)とWindowsだからリダイレクションでデータの受け渡しがうまくいってないのかな？と推測し、Linuxコマンドも使えるPower Shellを使ってみたところ、最初の結果と異なり、target.dbのファイルサイズは倍になりました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再度、上記のビューワーで開こうとしたところ、復号化パスワードを求められ開けませんでした…&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3-android-device-monitor-利用&#34;&gt;3. Android Device Monitor 利用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方針を変え、Android Studioの付属ツールを使ってDBファイルをPCへコピーする方法を試しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Android Studioのメニューで[Tools]-[Android]-[Android Device Monitor]-[File Explorer]タブ
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;data&amp;rdquo;ディレクトリはあるのですが、その下のディレクトリが表示されず、DBファイルまでたどり着けなかったため諦めました。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;4-stetho-利用&#34;&gt;4. stetho 利用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;facebookが提供している&lt;a href=&#34;https://github.com/facebook/stetho&#34; target=&#34;_blank&#34;&gt;stetho&lt;/a&gt;というデバッグツールを使いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(4-1) 準備&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://facebook.github.io/stetho/#download&#34; target=&#34;_blank&#34;&gt;このページ&lt;/a&gt;からjarをダウンロードし、下記ディレクトリへコピーします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[アプリのルート]-[mobile]-[libs]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;僕のbuild.gradleは、もともとlibsの全jarを読み込み対象にしていたのでひとまずそのままにしました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(build.gradle抜粋)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    dependencies {
        compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
        wearApp project(&#39;:wear&#39;)
        compile &#39;com.android.support:appcompat-v7:21.0.3&#39;
        compile &#39;com.google.android.gms:play-services:6.5.87&#39;
        compile &amp;quot;com.android.support:support-v4:20.0.+&amp;quot;
        compile files(&#39;libs/gson-2.5.jar&#39;)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さらに、ソースコードへ下記①、②を追記します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//①
import com.facebook.stetho.Stetho;

public class MainActivity extends ActionBarActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        //②
        Stetho.initializeWithDefaults(this);

        // 以下省略
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(4-2) エラー対応&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ビルドしたところ、下記エラーが発生しました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ライブラリを重複して読み込もうとする際に出るエラーのようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;:mobile:dexDebug
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;UNEXPECTED TOP-LEVEL EXCEPTION:&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;com.android.dex.DexException: Multiple dex files define Landroid/support/v7/appcompat/R$anim;&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.readSortableTypes(DexMerger.java:596)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.getSortedTypes(DexMerger.java:554)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.mergeClassDefs(DexMerger.java:535)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.mergeDexes(DexMerger.java:171)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.merge(DexMerger.java:189)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.dexer.Main.mergeLibraryDexBuffers(Main.java:454)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.dexer.Main.runMonoDex(Main.java:303)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.dexer.Main.run(Main.java:246)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.dexer.Main.main(Main.java:215)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.Main.main(Main.java:106)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}

FAILED

FAILURE: Build failed with an exception.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下記のようにbuild.gradleを変更し、stethoを個別に定義するようにしました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;s&gt;さらに上記エラーメッセージの3行目から推測して、除外設定も追加しています。(&lt;a href=&#34;http://stackoverflow.com/questions/27719436/how-to-remove-duplicate-libraries-added-via-gradle/27773664&#34; target=&#34;_blank&#34;&gt;参考ページ&lt;/a&gt;)&lt;/s&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;font color=&#34;red&#34;&gt;(2017/05/16,追記)除外設定はなくてもOKでした。まだ追いきれてませんが、fileTreeによる指定がまずかったようです。&lt;/font&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(build.gradle抜粋)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;dependencies {
    //この指定はやめる。
    //compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
    wearApp project(&#39;:wear&#39;)
    compile &#39;com.android.support:appcompat-v7:21.0.3&#39;
    compile &#39;com.google.android.gms:play-services:6.5.87&#39;
    compile &amp;quot;com.android.support:support-v4:20.0.+&amp;quot;
    compile files(&#39;libs/gson-2.5.jar&#39;)
                
    //これを含めるのはデバッグ時のみにし、重複エラーが出たので除外設定を追加。
    //debugCompile (&#39;com.facebook.stetho:stetho:1.5.0&#39;) {
    //  exclude group: &#39;android.support&#39;, module: &#39;library&#39;
    //}
                
    //(2017/05/16,追記) この指定で十分でした。
    debugCompile (&#39;com.facebook.stetho:stetho:1.5.0&#39;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(4-3) 使い方&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;アプリをビルドして、Chromeのアドレスバーに下記URLを入力します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chrome://inspect&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Android端末名の下にアプリ名が表示されるので、&amp;rdquo;inspect&amp;rdquo;をクリック。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/view_sqlite_on_android/chrome.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;80%&#34; height=&#34;80%&#34; title=&#34;chrome&#34; alt=&#34;chrome&#34; src=&#34;https://sankame.github.io/assets/posts/img/view_sqlite_on_android/chrome.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;新しいウィンドウが開き、[Web SQL]-【アプリケーションID】-【テーブル名】を開くとSQLiteのデータが参照できました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さらに、【アプリケーションID】をクリックすると右ペインにプロンプト(&amp;gt;)が表示され、そこでSQL文も実行できるのでかなり使えそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/view_sqlite_on_android/view_sqlite_db.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;80%&#34; height=&#34;80%&#34; title=&#34;chrome&#34; alt=&#34;chrome&#34; src=&#34;https://sankame.github.io/assets/posts/img/view_sqlite_on_android/view_sqlite_db.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Webサイト・スピードアップ - ブラウザキャッシュ利用</title>
      <link>https://sankame.github.io/blog/2017-04-16-speed_up_website_use_browser_cache/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-04-16-speed_up_website_use_browser_cache/</guid>
      <description>

&lt;h3 id=&#34;0-前提&#34;&gt;0. 前提&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;環境などの前提条件は&lt;a href=&#34;https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/&#34; target=&#34;_blank&#34;&gt;前回の1から3&lt;/a&gt;と同じです。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://www.codeproject.com/Articles/26376/Speed-Up-Your-Website-By-Example&#34; target=&#34;_blank&#34;&gt;教科書&lt;/a&gt;の[1. Reduce number of HTTP requests]-[Use Browser Cache]をやってみました。&lt;/p&gt;

&lt;p&gt;修正が少ない静的ファイルはブラウザキャッシュの期間を延ばし、2回目以降のアクセスはキャッシュから読み込むことで速度向上につなげます。&lt;/p&gt;

&lt;p&gt;作業は下記の2点です。&lt;/p&gt;

&lt;p&gt;(1) キャッシュ期間延長&lt;/p&gt;

&lt;p&gt;　Webサーバーの設定でjs、cssのブラウザ・キャッシュ期間を延ばします。&lt;/p&gt;

&lt;p&gt;(2) ファイル名のユニーク化&lt;/p&gt;

&lt;p&gt;　上記1によって修正がすぐに反映されないという状況を避けるため、ファイル名に修正ごとのハッシュ値を付けてキャッシュが効かないようにします。(gulpの機能を利用)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-キャッシュ期間延長&#34;&gt;1. キャッシュ期間延長&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nginxの設定ファイルにjs、cssの設定とキャッシュ期間を追記しました。&lt;/p&gt;

&lt;p&gt;記述が冗長なのは追って別の書き方を調べたいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
        listen 443 ssl;
        server_name [ドメイン名];
        ssl_certificate [ファイルパス];
        ssl_certificate_key [ファイルパス];

        location / {
            proxy_pass http://[ホスト名]:[ポート番号];
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header Host $host;
        }

        # --- css/jsの指定を追加。 ---
        location ~* .(css|js)$ {
            proxy_pass http://[ホスト名]:[ポート番号];
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header Host $host;
            # キャッシュ期間を設定。
            expires 365d;
        }
        # --- css/jsの指定を追加。 ---
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ChromeのDeveloper Toolsで見て、Expiresヘッダーの追加とjs、cssがキャッシュから読み込まれていることを確認します。(下図オレンジの枠線)&lt;/p&gt;

&lt;p&gt;(注)キャプチャのタイミングに数日のズレあり、また下記2まで対応した後のためファイル名も変更済み。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;変更前&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/before.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;70%&#34; height=&#34;70%&#34; title=&#34;変更前&#34; alt=&#34;変更前&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/before.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;変更後
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/after.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;70%&#34; height=&#34;70%&#34; title=&#34;変更後&#34; alt=&#34;変更後&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/after.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-ファイル名のユニーク化&#34;&gt;2. ファイル名のユニーク化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;作業にかかろうと思ったら、gulpコマンドが実行できなくなっていたので、それも記載しておきます。&lt;/p&gt;

&lt;p&gt;Webアプリのルートディレクトリでgulpを実行すると下記メッセージが表示されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gulp
-bash: gulp: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前回設定したnodebrewへのパスが消えているようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo $PATH | grep nodebrew
$
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sourceで再読み込みすればgulpコマンドも使えるのですが、毎回やるのは面倒です。&lt;/p&gt;

&lt;p&gt;Macだと.bashrcがターミナル起動時に読み込まれないようなので、.bash_profileに設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;末尾にこれを追記します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さて、気を取り直して本題です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/gulp_handle_files.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;70%&#34; height=&#34;70%&#34; title=&#34;gulpファイル操作&#34; alt=&#34;gulpファイル操作&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/gulp_handle_files.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gulpを使って上記のファイル操作を行います。&lt;font color=&#34;green&#34;&gt;(*1)&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;① これから出力するファイルを予め削除。&lt;/p&gt;

&lt;p&gt;② jsファイルを圧縮、結合。&lt;/p&gt;

&lt;p&gt;③ ファイル名にハッシュ値を付け、さらに変換内容をrev-manifest.jsonに記録。&lt;/p&gt;

&lt;p&gt;④ rev-manifest.jsonを元に、オリジナルファイル(simple-cal.orgディレクトリ配下)内のjsファイル名を置換したファイルをViewsディレクトリに配置。この時、オリジナルは変更されません。また、プログラムから使用されているのはViewsディレクトリ配下のものだけです。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(*1)&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;実際はsimple-calの下にcssディレクトリもありますがスペースの都合で省略。
ディレクトリ構造はフレームワークに依存するので、適宜読み替えて下さい。
拡張子stencilはHTMLを生成するためのViewファイルです。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この処理を行うため、下記のgulpfile.jsをWebアプリのルートディレクトリに置き、&lt;a href=&#34;https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/&#34; target=&#34;_blank&#34;&gt;前回&lt;/a&gt;から追加で必要なプラグインをインストールした後、gulpコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install --save-dev gulp-clean gulp-rev gulp-rev-replace
$ 
$ gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/cbe3bb65777cdeacd381ce2cde18fe6d.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;各タスクの関連については、下図を参照して下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/&#34; target=&#34;_blank&#34;&gt;前回&lt;/a&gt;から改善して、タスクの同期・非同期を明確にしました。&lt;/p&gt;

&lt;p&gt;矢印の集約が同期ポイントで、例えばrev-replaceはjs-revとcss-revの完了を待ってから開始します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/gulp_task_flow.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;70%&#34; height=&#34;70%&#34; title=&#34;gulpタスクフロー&#34; alt=&#34;gulpタスクフロー&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/gulp_task_flow.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;その他として、僕が使っているフレームワークのようにViewの拡張子(.stencil)が一般的ではない場合、gulp-rev-replaceで置換できないということが起きます。&lt;/p&gt;

&lt;p&gt;これについては&lt;a href=&#34;https://github.com/jamesknelson/gulp-rev-replace#user-content-optionsreplaceinextensions&#34; target=&#34;_blank&#34;&gt;仕様&lt;/a&gt;を確認した後、replaceInExtensionsオプションの指定で解決できました。(上記gulpfile.jsに記載済み)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-結果&#34;&gt;7.結果&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここまでやって前後の比較をしたところ、Chromeで下記の結果になりました。&lt;/p&gt;

&lt;p&gt;やはり転送量が大きく削減されていますね。&lt;/p&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34;&gt;
&lt;tr bgcolor=&#34;#fff5ee&#34;&gt;
    &lt;th width=&#34;20%&#34;&gt;&lt;/th&gt;
    &lt;th&gt;Before&lt;/th&gt;
    &lt;th&gt;After&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Load&lt;br&gt;(5回の平均)&lt;/td&gt;
    &lt;td&gt;2.7秒&lt;/td&gt;
    &lt;td&gt;1.9秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;転送量&lt;/td&gt;
    &lt;td&gt;451KB&lt;/td&gt;
    &lt;td&gt;34KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;リクエスト数&lt;/td&gt;
    &lt;td&gt;19&lt;/td&gt;
    &lt;td&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugoクイックスタート</title>
      <link>https://sankame.github.io/blog/2017-03-19-hugo_quickstart/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-03-19-hugo_quickstart/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[Hugo] 0.19
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-インストール&#34;&gt;1.インストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここ数年、ブログウェアはjekyllを使ってましたが、下記の点が不便だったので、評判の良いHugoを試してみました。まずはサンプルを動かすところまで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初期構築やバージョンアップが大変だったので、他のPCに環境を作る気になれない。(今ならDockerという手もありますが…)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事の生成に時間がかかるようになってきた。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事の更新後、2～3回リロードしないとブラウザに反映されない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tutorials/installing-on-mac/&#34; target=&#34;_blank&#34;&gt;インストール・マニュアル&lt;/a&gt;に従って進めました。&lt;/p&gt;

&lt;p&gt;僕の場合、Homebrewは既に入っていたのでStep2からやりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew update
    
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「インストール後にバージョンを調べてね」と書いてあるので念のためチェックです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls -l $( which hugo )
lrwxr-xr-x  1 mx  admin  28  3 19 03:08 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.19/bin/hugo
    
$ hugo version
Hugo Static Site Generator v0.19 darwin/amd64 BuildDate: 2017-02-27T19:21:29+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2行とも0.19なので問題なさそうです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-サンプル作成&#34;&gt;2.サンプル作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;に沿ってサンプルを作成しました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;適当なディレクトリで下記を実行します。(僕の場合 /app/hugo-test/ なので読み替えて下さい)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /app/hugo-test/
    
$ hugo new site bookshelf
    
$ cd bookshelf/
    
$ tree -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目的別のディレクトリが作成されていると思います。&lt;/p&gt;

&lt;p&gt;treeコマンドが使えない場合、下記でインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプル記事を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo new post/good-to-great.md
/app/hugo-test/bookshelf/content/post/good-to-great.md created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらにGitHubから適当なテーマを取得。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd themes/

$ git clone https://github.com/dim0627/hugo_theme_robust.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bookshelfディレクトリへ戻った後、テーマと下書きモードを指定してビルトインサーバーを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ..
    
$ hugo server --theme=hugo_theme_robust --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで下記URLにアクセスすると、先ほど作った&amp;rdquo;good to great&amp;rdquo;という記事が表示されました。(テンプレートは日本人デザイナー作！)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-init.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-init.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-サンプル更新&#34;&gt;3.サンプル更新&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;次に記事を更新してみます。&lt;/p&gt;

&lt;p&gt;そのままbookshelfディレクトリでファイルを開きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim content/post/good-to-great.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;適当に書き込むと…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;+++
date = &amp;quot;2017-03-19T03:39:26+09:00&amp;quot;
title = &amp;quot;good to great&amp;quot;
draft = true
    
+++
    
ここに記事を書いていく。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画面に反映されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-edit.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-edit.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;記事を編集するとブラウザのリロードも自動でやってくれるので便利です。&lt;/p&gt;

&lt;p&gt;ChromeのDeveloper Toolsで見ると、自動リロードはWebSocketを使っているようですね。(オレンジの枠線)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-websocket.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-websocket.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Webサイト・スピードアップ - gulp</title>
      <link>https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/</link>
      <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2017年03月07日&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;フロントエンドの話なのでサーバー環境はあまり関係ないのですが、参考まで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サーバー&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Nginx] 1.10.2
[Kitura] 1.1.2
[Swift] 3.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ローカル&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[Node.js] 7.6.0
[gulp] 3.9.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;1-準備&#34;&gt;1.準備&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;仕事でやっているWebサイトのスピードアップを個人でもやってみたくて、適当なページを1つ作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jyear.net/cal/&#34; target=&#34;_blank&#34;&gt;シンプルカレンダー&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そしてパフォーマンス改善の教科書に選んだのはこちらです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/26376/Speed-Up-Your-Website-By-Example&#34; target=&#34;_blank&#34;&gt;Speed Up Your Website&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-現状&#34;&gt;2.現状&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apacheで運用しているWebアプリが他にあるため、下記のようなちょっと珍しい構成になっています。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Nginx(リバースプロキシとして使用) + ServerSide-Swift(Kitura)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;僕のネット環境(下り57Mbps/上り18Mbps)&lt;font color=&#34;green&#34;&gt;(※1)&lt;/font&gt;だとシンプルカレンダーのロードタイムが約2.5秒&lt;font color=&#34;green&#34;&gt;(※2)&lt;/font&gt;でそこまでストレスは感じませんが、DBを使ってないわりにこの数字なので改善の余地ありです。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(※1)&lt;/font&gt; 回線速度は&lt;a href=&#34;http://www.speedtest.net/&#34; target=&#34;_blank&#34;&gt;SPEEDTEST&lt;/a&gt;で計測。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(※2)&lt;/font&gt; Chrome Developer Tools で計測。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3-ブラウザからのリクエスト削減&#34;&gt;3.ブラウザからのリクエスト削減&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Chrome Developer ToolsのNetworkタブで見るとCSS、JavaScript(以下JS)のダウンロードに時間がかかっているので、教科書の[1. Reduce number of HTTP requests]-[Combine files]から取り掛かってみました。&lt;/p&gt;

&lt;p&gt;HTMLから静的ファイル(CSS、JSなど)を複数ダウンロードする際、ブラウザが並列でリクエストできる数が決まっているため、なるべくそれを減らしましょうという内容です。&lt;/p&gt;

&lt;p&gt;複数の静的ファイルをまとめるためのツール&lt;font color=&#34;green&#34;&gt;(※3)&lt;/font&gt;を検討しましたが、一番簡単に実現できそうだったgulpを使いました。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(※3)&lt;/font&gt; webpack、gulp、Grunt&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;4-node-jsの準備&#34;&gt;4.Node.jsの準備&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.jsのバージョンを切り替えられるよう、nodebrew を使いたいと思います。(既にNode.jsをインストール済みの場合、読み飛ばしてもOKです)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HomebrewでNode.jsをインストール済みの場合は一度アンインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew uninstall node
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nodebrewをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install nodebrew
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nodebrewへのパスを通すため、.bashrcの末尾に下記を追記。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# これを追記
export PATH=$HOME/.nodebrew/current/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;設定を反映します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;続けてNode.jsをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nodebrew install-binary latest
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;エラーが出たので、&lt;a href=&#34;https://blog.yug1224.com/archives/5693a5e0fef2539c7d5b149d&#34; target=&#34;_blank&#34;&gt;このページ&lt;/a&gt;に従ってディレクトリを作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir ~/.nodebrew
$ mkdir ~/.nodebrew/src
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;使用するNode.jsのバージョンを指定。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nodebrew ls
v7.6.0

$ nodebrew use v7

$ node -v
v7.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;5-gulpの準備&#34;&gt;5.gulpの準備&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;gulpをインストール。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自分だけのローカル環境なのでグローバル(-g)を指定してインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install -g gulp
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アプリ(プロジェクト)のルートディレクトリで下記を実行すると、package.jsonファイルが作成されます。(これにパッケージ情報が書き込まれる)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;そのままgulpとgulpのプラグインをインストールし、&amp;rdquo;&amp;ndash;save-dev&amp;rdquo;を付けることでpackage.jsonに記録します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install --save-dev gulp
$ npm install --save-dev gulp-concat gulp-uglify gulp-minify-css
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;アプリのルートディレクトリに gulpfile.js というファイルを作成し、こちらの内容を記入します。(パスは自分の環境に読み替えて下さい)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/db5caad7d75a4064ef98f140a39de5bc.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;続けて下記コマンドを打つと指定したディレクトリに結合・圧縮したCSS、JSファイルが出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gulp
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTMLからはそれらを読み込むよう修正します。(上記の例ではbundle.css、bundle.js)&lt;/p&gt;

&lt;p&gt;イメージはこんな感じです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_gulp/gulp_image.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;gulpイメージ&#34; alt=&#34;gulpイメージ&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_gulp/gulp_image.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ブラウザでJSエラー発生。&lt;/p&gt;

&lt;p&gt;修正後の画面をブラウザで確認したところ下記エラーが表示されました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Bootstrap&#39;s JavaScript requires jQuery&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;どうやら上記の書き方だと、CSSやJSの読み込み順序が任意になり、BootstrapでjQueryが使えない状態になってるようです。&lt;/p&gt;

&lt;p&gt;もともとHTMLに書いてあったのと同じ順序でCSSとJSを指定するとエラーは出なくなりました。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/86e56663930ec4b8a2b0c187a7b66d61.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;(IE9以下の指定で読み込んでいたJSもとりあえず含んでいます)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;6-バックエンドとの接続不良&#34;&gt;6.バックエンドとの接続不良&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本番へアップすると、数回に一回、ブラウザ側でエラーが発生しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;GET https://jyear.net/simple-cal/js/dist/bundle.js net::ERR_CONTENT_LENGTH_MISMATCH
(index):47 GET https://jyear.net/simple-cal/css/dist/bundle.css net::ERR_CONTENT_LENGTH_MISMATCH
(index):2196 Uncaught ReferenceError: $ is not defined
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;またこのエラーが起きるとNginxでは下記のログが出力されていました。(【】はマスク)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream prematurely closed connection while reading upstream, client: 【IP】, server: jyear.net, request: &amp;quot;GET /simple-cal/css/dist/bundle.css HTTP/1.1&amp;quot;, upstream: &amp;quot;http://【ホスト名】/simple-cal/css/dist/bundle.css&amp;quot;, host: &amp;quot;jyear.net&amp;quot;, referrer: &amp;quot;https://jyear.net/cal/“
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろいろネットで調べたところ、バックエンドから接続が切られるとこのエラーがでるようです。&lt;/p&gt;

&lt;p&gt;Nginxのproxy_connect_timeoutや、Kituraにタイムアウト設定があるか調べたのですが、解決策が見つからなかったため、1つにしていたbundleファイルを分割することにしました。&lt;/p&gt;

&lt;p&gt;分割して1ファイル当たりのサイズを抑えることでエラーは出なくなりました。&lt;/p&gt;

&lt;p&gt;(そもそも1ファイル約200KBだったのでWebで扱うには大きかった…)&lt;/p&gt;

&lt;p&gt;最終的な gulpfile.js はこちらです。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/4167aaa3bfdbc4cc46f3b6a926f0ed25.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;7-結果&#34;&gt;7.結果&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここまでやって前後の比較をしたところ、Chromeで下記の結果になりました。&lt;/p&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34;&gt;
&lt;tr bgcolor=&#34;#fff5ee&#34;&gt;&lt;th width=&#34;20%&#34;&gt;&lt;/th&gt;&lt;th&gt;Before&lt;/th&gt;&lt;th&gt;After&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Load&lt;br&gt;(5回の平均)&lt;/td&gt;&lt;td&gt;2.2秒&lt;/td&gt;&lt;td&gt;1.6秒&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;転送量&lt;/td&gt;&lt;td&gt;518KB&lt;/td&gt;&lt;td&gt;451KB&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;リクエスト数&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;また、他の計測ツールとしてGTmetrixを使おうとしたのですが、エラーになってしまったため、LighthouseというChrome Extensionを利用しました。&lt;/p&gt;

&lt;p&gt;Lighthouseによる計測結果の詳細はこちら。&lt;a href=&#34;https://sankame.github.io/assets/posts/html/speed_up_website_gulp/gulp_before.html&#34; target=&#34;_blank&#34;&gt;Before&lt;/a&gt;　&lt;a href=&#34;https://sankame.github.io/assets/posts/html/speed_up_website_gulp/gulp_after.html&#34; target=&#34;_blank&#34;&gt;After&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Page load performance&amp;rdquo;の改善でトータル・スコアも若干上がりました。(42→44)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>crontabを安全に編集したい</title>
      <link>https://sankame.github.io/blog/2017-01-10-edit_crontab/</link>
      <pubDate>Tue, 10 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-01-10-edit_crontab/</guid>
      <description>

&lt;h1 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;[CentOS] 6.5&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;1-手順&#34;&gt;1. 手順&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;crontabの内容を適当な場所にコピー。&lt;/p&gt;

&lt;p&gt;(usernameはcronを設定するユーザーに読み替えて下さい)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cp -p /var/spool/cron/[username] ~
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;バックアップを取った後、内容を書き換えます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cp -p ~/[username] ~/[username].bak
$ vim ~/[username]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;crontabに取り込みます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ crontab ~/[username]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-注意&#34;&gt;2. 注意&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下記でも編集は可能ですが、できれば避けた方がいいと思います。&lt;/p&gt;

&lt;p&gt;キーボードで[E]の横には[R]があり、-r で誤ってcrontabの内容を削除する恐れがあるため。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ crontab -e
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>シェルで引数チェック</title>
      <link>https://sankame.github.io/blog/2017-01-08-sh_check_args/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-01-08-sh_check_args/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[GNU bash] 3.2.57
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-内容&#34;&gt;1. 内容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;test.shの先頭で第一引数をチェックして、無い場合は処理を中断します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test.sh&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ &amp;quot;$1&amp;quot; = &amp;quot;&amp;quot; ]
then

    echo &amp;quot;引数を指定して下さい。&amp;quot;
    # 処理を中断。
    exit 1

fi

echo &amp;quot;任意の処理&amp;quot;
echo &amp;quot;引数は$1&amp;quot;
exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行結果&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sh test.sh
引数を指定して下さい。

$ sh test.sh hoge
任意の処理
引数はhoge
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>