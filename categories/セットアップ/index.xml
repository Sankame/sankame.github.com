<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>セットアップ on プログラマー備忘録</title>
    <link>https://sankame.github.io/categories/%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/index.xml</link>
    <description>Recent content in セットアップ on プログラマー備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="https://sankame.github.io/categories/%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugoクイックスタート</title>
      <link>https://sankame.github.io/blog/2017-03-19-hugo_quickstart/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-03-19-hugo_quickstart/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[Hugo] 0.19
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-インストール&#34;&gt;1.インストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここ数年、ブログウェアはjekyllを使ってましたが、下記の点が不便だったので、評判の良いHugoを試してみました。まずはサンプルを動かすところまで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初期構築やバージョンアップが大変だったので、他のPCに環境を作る気になれない。(今ならDockerという手もありますが…)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事の生成に時間がかかるようになってきた。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事の更新後、2～3回リロードしないとブラウザに反映されない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tutorials/installing-on-mac/&#34; target=&#34;_blank&#34;&gt;インストール・マニュアル&lt;/a&gt;に従って進めました。&lt;/p&gt;

&lt;p&gt;僕の場合、Homebrewは既に入っていたのでStep2からやりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew update
    
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「インストール後にバージョンを調べてね」と書いてあるので念のためチェックです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls -l $( which hugo )
lrwxr-xr-x  1 mx  admin  28  3 19 03:08 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.19/bin/hugo
    
$ hugo version
Hugo Static Site Generator v0.19 darwin/amd64 BuildDate: 2017-02-27T19:21:29+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2行とも0.19なので問題なさそうです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-サンプル作成&#34;&gt;2.サンプル作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;に沿ってサンプルを作成しました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;適当なディレクトリで下記を実行します。(僕の場合 /app/hugo-test/ なので読み替えて下さい)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /app/hugo-test/
    
$ hugo new site bookshelf
    
$ cd bookshelf/
    
$ tree -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目的別のディレクトリが作成されていると思います。&lt;/p&gt;

&lt;p&gt;treeコマンドが使えない場合、下記でインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプル記事を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo new post/good-to-great.md
/app/hugo-test/bookshelf/content/post/good-to-great.md created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらにGitHubから適当なテーマを取得。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd themes/

$ git clone https://github.com/dim0627/hugo_theme_robust.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bookshelfディレクトリへ戻った後、テーマと下書きモードを指定してビルトインサーバーを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ..
    
$ hugo server --theme=hugo_theme_robust --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで下記URLにアクセスすると、先ほど作った&amp;rdquo;good to great&amp;rdquo;という記事が表示されました。(テンプレートは日本人デザイナー作！)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-init.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-init.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-サンプル更新&#34;&gt;3.サンプル更新&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;次に記事を更新してみます。&lt;/p&gt;

&lt;p&gt;そのままbookshelfディレクトリでファイルを開きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim content/post/good-to-great.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;適当に書き込むと…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;+++
date = &amp;quot;2017-03-19T03:39:26+09:00&amp;quot;
title = &amp;quot;good to great&amp;quot;
draft = true
    
+++
    
ここに記事を書いていく。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画面に反映されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-edit.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-edit.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;記事を編集するとブラウザのリロードも自動でやってくれるので便利です。&lt;/p&gt;

&lt;p&gt;ChromeのDeveloper Toolsで見ると、自動リロードはWebSocketを使っているようですね。(オレンジの枠線)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-websocket.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-websocket.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AppleWatchアプリ開発におけるiOSアプリのデバッグ方法</title>
      <link>https://sankame.github.io/blog/2016-08-07-debug-ios-app-with-watchkit/</link>
      <pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-08-07-debug-ios-app-with-watchkit/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[OS] Mac OS X 10.11.4
[IDE] Xcode 7.3
[Swift] 2.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-課題&#34;&gt;1. 課題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AppleWatchのアプリ開発で「WatchKit App」を起動すると、iOSアプリのブレークポイントで停止しない。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;XcodeのデバッガーにiOSアプリを手動で追加する必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;「WatchKit App」を選択してアプリ実行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/1.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/1.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iOSアプリのシュミレーターで、iOSアプリを起動。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Xcodeに戻って [Debug]-[Attach to Process] からiOSアプリを選択。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/2.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/2.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;左のパネルで[Debug navigator]を選択し、下記①②でiOSアプリが選択されていることを確認。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/3.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/3.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt - certbotコマンド</title>
      <link>https://sankame.github.io/blog/2016-05-15-letsencrypt_certbot_command/</link>
      <pubDate>Sun, 15 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-05-15-letsencrypt_certbot_command/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2016年08月06日&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[CentOS] 6.4 (64bit版カーネル)
[Apache] 2.2.15
[Firefox] 46.0.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-let-s-encryptのコマンド変更&#34;&gt;1. Let&amp;rsquo;s Encryptのコマンド変更&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://sankame.github.io/ssl-tls/letsencrypt_renewal/&#34; target=&#34;_blank&#34;&gt;証明書を更新した際、&lt;/a&gt; 「letsencrypt-autoコマンドはもう古いよ」という警告が出たので、更新したいと思います。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-更新作業-はマスク情報&#34;&gt;2. 更新作業(【】はマスク情報)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s Encryptがβ版の時はgit cloneして /usr/local/src/letsencrypt ディレクトリを作成しましたが、今回はそれとは別ディレクトリを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cd /usr/local/src
# git clone https://github.com/certbot/certbot
# cd certbot
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;疑似実行したところ成功したようなので、証明書の期限が迫ってきたら dry-run なしで実行してみたいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ./certbot-auto renew --dry-run
    
  ：
(省略)
  ：
Congratulations, all renewals succeeded. The following certs have been renewed:
/etc/letsencrypt/live/【ドメイン名】/fullchain.pem (success)
** DRY RUN: simulating &#39;certbot renew&#39; close to cert expiry
**          (The test certificates above have not been saved.)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font id=&#34;cron&#34; color=&#34;red&#34;&gt;(2016/08/06, 追記)&lt;/font&gt; &lt;a href=&#34;https://sankame.github.io/ssl-tls/letsencrypt_renewal/#cron&#34; target=&#34;_blank&#34;&gt;&lt;font color=&#34;green&#34;&gt;dry-runなしでの実行結果はこちら&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考ページ&#34;&gt;参考ページ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;① &lt;a href=&#34;https://letsencrypt.org/getting-started/&#34; target=&#34;_blank&#34;&gt;Getting Started&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;② &lt;a href=&#34;https://www.eff.org/deeplinks/2016/05/announcing-certbot-new-tls-robot&#34; target=&#34;_blank&#34;&gt;Announcing Certbot: EFF&amp;rsquo;s Client for Let&amp;rsquo;s Encrypt&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt - 証明書の更新と自動化</title>
      <link>https://sankame.github.io/blog/2016-02-21-letsencrypt_renewal/</link>
      <pubDate>Sun, 21 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-02-21-letsencrypt_renewal/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2016年11月09日&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-環境&#34;&gt;0.環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[CentOS] 6.4 (64bit版カーネル)
[Apache] 2.2.15
[Firefox] 44.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-メールで期限通知-はマスク情報&#34;&gt;1.メールで期限通知 (【】はマスク情報)&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/ssl-tls/letsencrypt_setup/&#34; target=&#34;_blank&#34;&gt;年末に設定した&lt;/a&gt; Let&amp;rsquo;s Encrypt のSSL証明書の期限が迫り、下記のお知らせメールが届きました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Let&#39;s Encrypt certificate expiration notice

Hello,

Your certificate (or certificates) for the names listed below will expire in 17 days (on 04 Mar 16 17:44 +0000). Please make sure to renew your certificate before then, or visitors to your website will encounter errors.

【以下省略】
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ブラウザで有効期限を確認するとそろそろ切れそうです。&lt;/p&gt;

&lt;p&gt;ブラウザのアドレスバーの鍵マークをクリックし、[ &amp;gt; ] - [詳細を表示] - [セキュリティ] - [証明書を表示] - [有効期限]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_renewal/ssl_before.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;SSL証明書更新前&#34; alt=&#34;SSL証明書更新前&#34; src=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_renewal/ssl_before.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-更新作業&#34;&gt;2.更新作業&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;公式マニュアルにそってやってみました。(参考ページ①)&lt;/p&gt;

&lt;p&gt;letsencrypt をインストールしたディレクトリに移動し、下記のコマンドを実行。&lt;/p&gt;

&lt;p&gt;(letsencrypt と letsencrypt-auto コマンドは互換性があるとのことなので、初回セットアップで使ったletsencrypt-autoを指定)&lt;/p&gt;

&lt;p&gt;(ディレクトリを忘れた場合は&lt;code&gt;locate letsencrypt-auto&lt;/code&gt;などで確認)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cd /usr/local/src/letsencrypt/
#
# ./letsencrypt-auto renew
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;1分ほど待って下記メッセージが表示されました。成功したようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# ./letsencrypt-auto renew
Updating letsencrypt and virtual environment dependencies...You are using pip version 7.1.2, however version 8.0.2 is available.
You should consider upgrading via the &#39;pip install --upgrade pip&#39; command.
....
Running with virtualenv: 【ディレクトリパス】 renew
Processing 【ディレクトリパス】
new certificate deployed without reload, fullchain is 【ディレクトリパス】/fullchain.pem

Congratulations, all renewals succeeded. The following certs have been renewed:
  【ディレクトリパス】/fullchain.pem (success)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;(2016/05/14, 追記) 証明書の更新は正常終了しましたが、下記の警告が出ました。&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;WARNING:certbot.cli:You are running with an old copy of letsencrypt-auto that does not receive updates, and is less reliable than more recent versions. We recommend upgrading to the latest certbot-auto script, or using native OS packages.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;letsencrypt-autoコマンドは古くなったようなので、次回から下記を使おうと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/ssl-tls/letsencrypt_certbot_command/&#34; target=&#34;_blank&#34;&gt;certbot-autoコマンドの準備はこちら&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ブラウザをリロードしたり、再起動しても証明書の有効期限は変わらず。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;公式マニュアルにはありませんが、Webサーバーの再起動が必要なようです。(参考ページ②)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# service httpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Webサーバーを再起動するとブラウザ側の有効期限も延長されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_renewal/ssl_after.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;SSL証明書更新後&#34; alt=&#34;SSL証明書更新後&#34; src=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_renewal/ssl_after.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;font id=&#34;cron&#34; color=&#34;red&#34;&gt;(2016/08/06, 追記)&lt;/font&gt; そろそろ面倒になってきたので、証明書の更新をCronに設定しました。&lt;/p&gt;

&lt;p&gt;頻繁に更新するとエラーになるようなので(参考ページ③)、10日に1回の実行です。&lt;/p&gt;

&lt;p&gt;もし失敗していても、冒頭に書いた通知メールがLet&amp;rsquo;s Encryptから届くので、気付くことはできそうです。(【】内は読み替え)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# SSL証明書更新。
# Webサーバー再起動を伴うため、深夜に実行。
0 3 */10 * * sh /【ユーザー】/bin/letsencrypt-renew.sh

&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/44a737ee39412c62b48a3392625569c6.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;font id=&#34;cron&#34; color=&#34;red&#34;&gt;(2016/08/22, 追記)&lt;/font&gt; 上記 renew.log を見たら更新が失敗していたので下記の対応を行いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;依存パッケージのインストールを求めるところで停止していたので、一度、手動で下記コマンドを実行。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;停止箇所&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Is this ok [y/N]: Exiting on user Command&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;手動実行したコマンド&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/usr/local/src/certbot/certbot-auto renew&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;その際、「まだ期限ではないので更新をスキップしたよ」というメッセージが出ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The following certs are not due for renewal yet:
  /etc/letsencrypt/live/【ドメイン名】/fullchain.pem (skipped)
No renewals were attempted.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;必ず更新するよう、コマンドに &amp;ndash;force-renew オプションを追加。(上記 gist の COMMAND にも反映済み)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下記メッセージが表示され、cronからの実行も成功しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Congratulations, all renewals succeeded.&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;また10日後くらいにちゃんと更新されているか見てみようと思います…&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;(2016/09/04, 追記) ログとブラウザを確認したところ、証明書は更新されていました。&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;これでしばらくは放っておいても大丈夫そうです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# cat /var/log/letsencrypt/renew.log
        
　：
(省略)
　：
Congratulations, all renewals succeeded. The following certs have been renewed:
/etc/letsencrypt/live/【ドメイン名】/fullchain.pem (success)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;font id=&#34;cron&#34; color=&#34;red&#34;&gt;(2016/11/09, 追記)&lt;/font&gt; ブラウザ上で証明書の開始日がしばらく更新されていなかったので、上記 renew.log を見たところ、またもやエラーが出ていました…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;エラー内容&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Dependencies Resolved

================================================================================
 Package Arch Version Repository Size
================================================================================
Updating:
 openssl x86_64 1.0.1e-48.el6_8.3 updates 1.5 M
 openssl-devel x86_64 1.0.1e-48.el6_8.3 updates 1.2 M

Transaction Summary
================================================================================
Upgrade 2 Package(s)

Total download size: 2.7 M
Is this ok [y/N]: Exiting on user Command
Could not install OS dependencies. Aborting bootstrap!
Automated renewal failed
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;何とか依存パッケージのインストール確認をスキップできないものかと調べていたら、コマンド集を見つけ、下記のオプションでうまくいきました。(参考ページ④)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--non-interactive&lt;/code&gt; (上記 gist の COMMAND にも反映済み)&lt;/p&gt;

&lt;p&gt;ちなみに、同ページに &amp;ndash;quiet を指定すると上記オプションも含む、と書かれていましたが、こちらはダメでした。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考ページ&#34;&gt;参考ページ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;① &lt;a href=&#34;https://letsencrypt.readthedocs.org/en/latest/using.html#renewal&#34; target=&#34;_blank&#34;&gt;公式マニュアル　証明書更新&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;② &lt;a href=&#34;https://tech.nosuz.jp/2015/12/lets-encrypt-https/&#34; target=&#34;_blank&#34;&gt;Let’s Encryptから証明書を取得して常時HTTPS化&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;③ &lt;a href=&#34;http://qiita.com/pm11op/items/5759d4a2c755509f6d42&#34; target=&#34;_blank&#34;&gt;Let&amp;rsquo;s Encrypt で証明書を小刻みに自動更新&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;④ &lt;a href=&#34;https://letsencrypt.jp/command/&#34; target=&#34;_blank&#34;&gt;Let&amp;rsquo;s Encrypt コマンド集&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>お薦め無料SSL証明書 - Let&#39;s Encrypt</title>
      <link>https://sankame.github.io/blog/2015-12-07-letsencrypt_setup/</link>
      <pubDate>Mon, 07 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2015-12-07-letsencrypt_setup/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2017年04月30日&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-環境&#34;&gt;0.環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[CentOS] 6.4 (64bit版カーネル)
[Apache] 2.2.15
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-セットアップ&#34;&gt;1.セットアップ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;個人利用のレンタルサーバーでは有料のSSL証明書を使っていたのですが、
有効期限切れを機にフリーのものに乗り換えてみました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s Encrypt というサービスを利用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://letsencrypt.org/&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;80%&#34; height=&#34;80%&#34; title=&#34;Let&#39;s Encryptトップ&#34; alt=&#34;Let&#39;s Encryptトップ&#34; src=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_setup/letsencrypt_top.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記ページに沿って進めます。(その他の参考ページは末尾に記載)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://letsencrypt.org/howitworks/&#34; target=&#34;_blank&#34;&gt;&lt;font color=&#34;green&#34;&gt;Let&amp;rsquo;s Encrypt 操作方法&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;任意のディレクトリに Let&amp;rsquo;s Encrypt クライアントをダウンロード。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /usr/local/src
# git clone https://github.com/letsencrypt/letsencrypt
# cd letsencrypt
# ./letsencrypt-auto --help
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;お！ helpだから使い方が表示されるかと思いきや、依存関係のあるパッケージがダウンロードされた・・・&lt;/p&gt;

&lt;p&gt;しかも下記メッセージによると、どうやらPythonのバージョンが古くて失敗してるっぽい。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  ：
(省略)
  ：
Complete!
WARNING: Python 2.6 support is very experimental at present...
if you would like to work on improving it, please ensure you have backups
and then run this script again with the --debug flag!
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ググってみると同じ問題で悩んでる人がいました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/letsencrypt/letsencrypt/issues/1046&#34; target=&#34;_blank&#34;&gt;&lt;font color=&#34;green&#34;&gt;letsencrypt-autoは Python 2.6では動かない&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さらに調べると下記ページに解決方法がありました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://community.letsencrypt.org/t/redhat-centos-6-x-users-need-python-2-7/2190&#34; target=&#34;_blank&#34;&gt;&lt;font color=&#34;green&#34;&gt;CentOS 6系は Python 2.7をインストールする必要あり&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;実行コマンドは下記の通り。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum install python27 python27-python-devel python27-python-setuptools python27-python-tools python27-python-virtualenv
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;pythonのバージョンを調べる。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# python --version
Python 2.6.6
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;(注) 2.6のままですが気にせず続行します。&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;red&#34;&gt;(yum管理外でPythonをソースからビルドしてインストールすると letsencrypt-auto が動かなくなりました)&lt;/font&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;コマンドを再実行すると、Pythonが古い旨のメッセージはもう出なくなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ./letsencrypt-auto --help
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;続けてドメイン認証を試みます。(以降【】内は読み替えて下さい)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ./letsencrypt-auto --apache -d 【ドメイン名】
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;エラーメッセージが・・・&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Updating letsencrypt and virtual environment dependencies.......
Running with virtualenv: /root/.local/share/letsencrypt/bin/letsencrypt --apache -d 【ドメイン名】
Version: 1.1-20080819
Version: 1.1-20080819
The apache plugin is not working; there may be problems with your existing configuration.
The error was: NoInstallationError()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ユーザーガイドによるとApache2.2系だとapacheプラグイン(&amp;ndash;apache)は使えないようです。&lt;/p&gt;

&lt;p&gt;となると、下記の通りstandaloneかwebrootのいずれかを実行しないといけません。&lt;/p&gt;

&lt;p&gt;If you want to use a webserver that doesn&amp;rsquo;t have full plugin support yet, you can still use &amp;ldquo;standalone&amp;rdquo; or &amp;ldquo;webroot&amp;rdquo; plugins to obtain a certificate: (&lt;a href=&#34;https://letsencrypt.readthedocs.org/en/latest/using.html#standalone&#34; target=&#34;_blank&#34;&gt;ユーザーガイド抜粋&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;僕の場合、1つのサーバーに複数のvirtual hostを立てているのでwebrootプラグインを使いました。&lt;/p&gt;

&lt;p&gt;さらにwebrootプラグインだとApache無停止でいけるそうです。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;念のため、既に書いてあったSSL用のvirtual hostはコメントアウトしてApacheを再起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#&amp;lt;VirtualHost *:443&amp;gt;
#    ：
# 【省略
#    ：
#&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下記コマンド実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ./letsencrypt-auto certonly --webroot -w 【ドキュメントルート】 -d 【ドメイン名】
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;連絡用e-mailを入力し、利用規約を確認します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_setup/enter_email.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;80%&#34; height=&#34;80%&#34; title=&#34;email入力&#34; alt=&#34;email入力&#34; src=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_setup/enter_email.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_setup/read_terms_of_service.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;80%&#34; height=&#34;80%&#34; title=&#34;利用規約&#34; alt=&#34;利用規約&#34; src=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_setup/read_terms_of_service.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下記のエラーが出ました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Updating letsencrypt and virtual environment dependencies.......
Running with virtualenv: /root/.local/share/letsencrypt/bin/letsencrypt certonly --webroot -w 【ドキュメントルート】 -d 【ドメイン名】
Version: 1.1-20080819
Version: 1.1-20080819
Failed authorization procedure. 【ドメイン名】 (http-01): urn:acme:error:unauthorized :: The client lacks sufficient authorization :: Invalid response from http://【ドメイン名】/.well-known/acme-challenge/【省略】 [【サーバーIP】]: 401

IMPORTANT NOTES:
 - The following &#39;urn:acme:error:unauthorized&#39; errors were reported by
   the server:

   Domains: 【ドメイン名】
   Error: The client lacks sufficient authorization
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ドキュメントルートにファイルを配置して、インターネットからアクセスを試みているけど失敗してるっぽい・・・&lt;/p&gt;

&lt;p&gt;試しにブラウザから上記URLにアクセス。&lt;/p&gt;

&lt;p&gt;僕の場合、もともとport80(http)からport443(https)へリダイレクトする設定にしていたためエラーになっていました。&lt;/p&gt;

&lt;p&gt;リダイレクトを無効にし、ブラウザから上記URLにアクセスできることを確認した上で、再度サーバー上で下記を実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ./letsencrypt-auto certonly --webroot -w 【ドキュメントルート】 -d 【ドメイン名】
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下記メッセージが表示され認証が成功！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;Updating letsencrypt and virtual environment dependencies.......
Running with virtualenv: /root/.local/share/letsencrypt/bin/letsencrypt certonly --webroot -w 【ドキュメントルート】 -d 【ドメイン名】
Version: 1.1-20080819
Version: 1.1-20080819

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/【ドメイン名】/fullchain.pem. Your cert will
   expire on 2016-03-04. To obtain a new version of the certificate in
   the future, simply run Let&#39;s Encrypt again.
 - If like Let&#39;s Encrypt, please consider supporting our work by:

   Donating to ISRG / Let&#39;s Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;この後どうすれば・・・？&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ユーザーガイドによると、apahceプラグインなら全自動で設定してくれるようですが、今回は使ってないので手動で証明書ファイルを設定する必要あり。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記メッセージのパスを覗いてみると、必要なファイル一式がありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ll /etc/letsencrypt/live/【ドメイン名】
#
lrwxrwxrwx 1 root root 38 12月  6 03:43 2015 cert.pem -&amp;gt; ../../archive/【ドメイン名】/cert1.pem
lrwxrwxrwx 1 root root 39 12月  6 03:43 2015 chain.pem -&amp;gt; ../../archive/【ドメイン名】/chain1.pem
lrwxrwxrwx 1 root root 43 12月  6 03:43 2015 fullchain.pem -&amp;gt; ../../archive/【ドメイン名】/fullchain1.pem
lrwxrwxrwx 1 root root 41 12月  6 03:43 2015 privkey.pem -&amp;gt; ../../archive/【ドメイン名】/privkey1.pem
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;fullchainを除く3ファイルをport443のvirtual hostに設定してApache再起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;VirtualHost *:443&amp;gt;
    ServerAdmin  【メールアドレス】
    DocumentRoot &amp;quot;【ドキュメントルート】&amp;quot;
    ServerName   【ドメイン名】
    SSLEngine on
    SSLCertificateFile      /etc/letsencrypt/live/【ドメイン名】/cert.pem
    SSLCertificateKeyFile   /etc/letsencrypt/live/【ドメイン名】/privkey.pem
    SSLCertificateChainFile /etc/letsencrypt/live/【ドメイン名】/chain.pem

    ErrorLog  logs/【ドメイン名】-error_log
    CustomLog logs/【ドメイン名】-access_log common
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# service httpd restart
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;httpからhttpsへのリダイレクト設定も元に戻します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ブラウザでサイトにアクセスするとSSLマークが表示されました！(ドメイン名はマスク済み)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_setup/browser.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;ブラウザSSL表示&#34; alt=&#34;ブラウザSSL表示&#34; src=&#34;https://sankame.github.io/assets/posts/img/letsencrypt_setup/browser.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Let&amp;rsquo;s Enctyptの証明書は有効期間が短いので、ついでに自動更新の設定もしておきましょう。(下記リンク参照)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/ssl-tls/letsencrypt_renewal/&#34; target=&#34;_blank&#34;&gt;&lt;font color=&#34;green&#34;&gt;Let&amp;rsquo;s Encrypt - 証明書の更新と自動化&lt;/font&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;組織の実在証明はありませんが、個人で暗号化メインならこれで十分ですね。何より無料がうれしいです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考ページ&#34;&gt;参考ページ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://letsencrypt.readthedocs.org/en/latest/using.html#installation&#34; target=&#34;_blank&#34;&gt;ユーザーガイド&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/letsencrypt/letsencrypt&#34; target=&#34;_blank&#34;&gt;Let&amp;rsquo;s Encrypt クライアントツール&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>【Angular2】クイックスタート</title>
      <link>https://sankame.github.io/blog/2015-06-23-angular2_quick_start/</link>
      <pubDate>Tue, 23 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2015-06-23-angular2_quick_start/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0.環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[CentOS]  6.5
[node.js] 0.12.4
[npm]     2.10.1
[tsd]     0.6.0
[tsc]     1.5.0-beta
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-インストール&#34;&gt;1.インストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Googleの&lt;a href=&#34;https://angular.io/docs/js/latest/quickstart.html&#34; target=&#34;_blank&#34;&gt;QuickStartページ&lt;/a&gt;に沿って進めます。(以降、JavaScriptはJSと記述)&lt;/p&gt;

&lt;p&gt;Angular2はJSでも動かせますが、JSのスーパーセットTypeScriptに対応しているので、Googleのページ同様、後者について記述します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;最終的に下記の構成になります。&lt;/p&gt;

&lt;p&gt;tscを使ってhello.tsをhello.jsへ変換します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/angular2_quick_start/system.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;システム構成&#34; alt=&#34;システム構成&#34; src=&#34;https://sankame.github.io/assets/posts/img/angular2_quick_start/system.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;まずnode.jsとnpmの依存管理を楽にするため、nvmをインストールします。&lt;/p&gt;

&lt;p&gt;※CentOS 5系だとnode.jsを動かすのに苦労するので、&lt;a href=&#34;http://sankame.github.io/vagrant/vagrant_setup/&#34; target=&#34;_blank&#34;&gt;こちらの記事&lt;/a&gt;を参考にCentOS6.x 環境構築を推奨します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# git clone git://github.com/creationix/nvm.git ~/.nvm
# source ~/.nvm/nvm.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;node.jsをバージョン指定でインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# nvm install 0.12.4
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nvmでnode.jsのデフォルトバージョンを設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# nvm alias default v0.12.4
# vi ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;.bash_profile の末尾に下記を追記。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;if [[ -s ~/.nvm/nvm.sh ]];
    then source ~/.nvm/nvm.sh
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tsd (TypeScript用 型定義ファイル管理ツール) をインストール。&lt;/p&gt;

&lt;p&gt;※npmのバージョンが低いとtsdのインストールが止まってしまうので注意。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# npm install tsd@0.6.0 -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記の警告が出たが5分ほどしてインストールが成功。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm WARN engine joi-assert@0.0.3: wanted: {&amp;quot;node&amp;quot;:&amp;quot;&amp;gt;= 0.10.0 &amp;lt;= 0.11.0&amp;quot;} (current: {&amp;quot;node&amp;quot;:&amp;quot;0.12.4&amp;quot;,&amp;quot;npm&amp;quot;:&amp;quot;2.10.1&amp;quot;})
npm WARN peerDependencies The peer dependency minichain@~0.0.1 included from minitable will no
npm WARN peerDependencies longer be automatically installed to fulfill the peerDependency
npm WARN peerDependencies in npm 3+. Your application will need to depend on it explicitly.
/root/.nvm/versions/node/v0.12.4/bin/tsd -&amp;gt; /root/.nvm/versions/node/v0.12.4/lib/node_modules/tsd/build/cli.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続けてAngular2用の型定義をインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# tsd query angular2 --action install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※rootユーザー以外だと下記エラーが出る可能性があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; install error!
EACCES, mkdir &#39;/etc/rc.d/init.d/typings&#39;
Error: EACCES, mkdir &#39;/etc/rc.d/init.d/typings&#39;
at Error (native)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;tsc (TypeScript→JS変換ツール) をインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# npm install -g typescript@^1.5.0-beta
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-サンプル実行&#34;&gt;2.サンプル実行&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;任意のディレクトリで下記サンプルファイルを作成。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /app/angular2_quickstart/ # 任意のディレクトリ
# touch hello.html hello.ts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;① hello.html&lt;/p&gt;

&lt;p&gt;{% gist 313fb54ffa44bf31ed2a hello.html%}&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;② hello.ts&lt;/p&gt;

&lt;p&gt;{% gist e4ed0d2d8b9c9df5f074 hello.ts%}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上記ディレクトリにて、tscを監視モードで実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /app/angular2_quickstart/
# 
# tsc --watch -m commonjs -t es5 --emitDecoratorMetadata *.ts
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;簡易HTTPサーバーをインストール後、上記ディレクトリで起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# npm install http-server -g
#
# cd /app/angular2_quickstart/
#
# http-server
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ブラウザ確認&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下記URLで&amp;rdquo;Hello World !&amp;ldquo;が表示されれば成功です。(ホスト名(IP)は自分の環境に読み替え)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://192.168.33.10:8080/hello.html&#34;&gt;http://192.168.33.10:8080/hello.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考ページ&#34;&gt;※参考ページ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://angular.io/docs/js/latest/quickstart.html&#34; target=&#34;_blank&#34;&gt;公式ページ (5 MIN QUICKSTART)&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://liginc.co.jp/web/programming/node-js/85318&#34; target=&#34;_blank&#34;&gt;nvm インストール&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant &#43; VirtualBox でCentOS開発環境構築</title>
      <link>https://sankame.github.io/blog/2015-05-06-vagrant_setup/</link>
      <pubDate>Wed, 06 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2015-05-06-vagrant_setup/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2017年01月28日&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-環境&#34;&gt;0.環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[PC]  DELL LATITUDE E5500
[OS]  Windows7 (32bit 版)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-概要&#34;&gt;1.概要&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Vagrantで開発環境を作りました。&lt;/p&gt;

&lt;p&gt;VirtualBoxを操作するためにVagrantというツールを使うイメージです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/vagrant_setup/vagrant.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;接続情報&#34; alt=&#34;接続情報&#34; src=&#34;https://sankame.github.io/assets/posts/img/vagrant_setup/vagrant.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;VirtualBox上に仮想マシン(以下VM)起動し、そこにCentOSをインストールして開発環境とします。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-bios設定変更&#34;&gt;2.BIOS設定変更&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VMを起動する前準備として、BIOSの設定を変更します。&lt;/p&gt;

&lt;p&gt;PC起動時に、OSが起動する前に特定のキーを押してBIOS設定画面を開きます。&lt;/p&gt;

&lt;p&gt;(PCによって異なるので、下記は自分のPCに読み替えて下さい)&lt;/p&gt;

&lt;p&gt;PC起動時に[F2] または [F10]キーを押下。&lt;/p&gt;

&lt;p&gt;[Virtualization Support] - [Virtualization]を選択し、[Enable]にチェックをつけて[Apply]→[Exit]を選択。&lt;/p&gt;

&lt;p&gt;そのままOSが起動するのを待ちます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-virtualboxインストール&#34;&gt;3.VirtualBoxインストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下記ページで&amp;rdquo;VirtualBox 4.3.26 for Windows hosts&amp;rdquo; をクリックしVirtualBoxをダウンロード。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34; target=&#34;_blank&#34;&gt;VirtualBoxダウンロード&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードもインストールも僕の環境では数分かかりました。&lt;/p&gt;

&lt;p&gt;途中何度かOracle社のコンポーネントをインストールしますか？と聞かれたので全てYesを選択。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-vagrantインストール&#34;&gt;4.Vagrantインストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;下記ページでWindows用を選択して Vagrantをダウンロード。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34; target=&#34;_blank&#34;&gt;Vagrantダウンロード&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インストールが終わったら再起動を求められます。&lt;/p&gt;

&lt;p&gt;boxファイル(用意されたVMイメージ)を取得し、VirtualBoxに追加。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-control&#34;&gt;C:\Users\【ユーザー名】&amp;gt; vagrant box add CentOS65 https://github.com/2creatives/vagrant-centos/releases/download/v6.5.3/centos65-x86_64-20140116.box
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-vagrantを使ってvirtualboxのvmを起動&#34;&gt;5.Vagrantを使ってVirtualBoxのVMを起動&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;適当なフォルダにVagrantファイルを作成し、VM起動時の設定を定義します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-control&#34;&gt;C:\apps\Vagrant\Vagrantfiles&amp;gt;mkdir centos

C:\apps\Vagrant\Vagrantfiles&amp;gt;cd centos

C:\apps\Vagrant\Vagrantfiles\centos&amp;gt;vagrant init CentOS65
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.

C:\apps\Vagrant\Vagrantfiles\centos&amp;gt;dir
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;自動生成された Vagrantfile を編集。&lt;/p&gt;

&lt;p&gt;必要な箇所のコメントアウトを解除します。（編集前後のdiffを記載）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;# diff Vagrantfile.org Vagrantfile                       
29c29
&amp;lt;   # config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.10&amp;quot;
---
&amp;gt;   config.vm.network &amp;quot;private_network&amp;quot;, ip: &amp;quot;192.168.33.10&amp;quot;
46c47
&amp;lt;   # config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
---
&amp;gt;   config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
48c49
&amp;lt;   #   vb.gui = true
---
&amp;gt;       vb.gui = true
51,52c52,53
&amp;lt;   #   vb.memory = &amp;quot;1024&amp;quot;
&amp;lt;   # end
---
&amp;gt;       vb.memory = &amp;quot;1024&amp;quot;
&amp;gt;   end
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;vb.gui = true&amp;rdquo; のコメントアウトを解除しないと、VM起動時に下記エラーが出続けるので注意。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-control&#34;&gt;default: Warning: Connection timeout. Retrying...
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;編集が終わったら VagrantコマンドでVMを起動。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-control&#34;&gt;C:\apps\Vagrant\Vagrantfiles\centos&amp;gt; vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;6-ターミナルソフトでvmに接続&#34;&gt;6.ターミナルソフトでVMに接続&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使い慣れたターミナルソフトでVMに接続します。&lt;/p&gt;

&lt;p&gt;まずは用意された user=vagrant, password=vagrant で接続。&lt;/p&gt;

&lt;p&gt;(下記はpoderosaでの接続例)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/vagrant_setup/poderosa.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;20%&#34; height=&#34;20%&#34; title=&#34;接続情報&#34; alt=&#34;接続情報&#34; src=&#34;https://sankame.github.io/assets/posts/img/vagrant_setup/poderosa.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以降は root で接続したいので、rootのパスワードを再設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo passwd root
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-その他-ファイル共有&#34;&gt;7.その他：ファイル共有&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ホストOS(Windows)とゲストOS(CentOS)でファイル共有したい場合、上記5の Vagrantfile で下記の行を有効にします。&lt;/p&gt;

&lt;p&gt;Vagrantfileの変更を反映するにはVMの再起動が必要。&lt;/p&gt;

&lt;p&gt;(例) 左がWindows、右がCentOSのパス。(Windowsのパスは\を2つ重ねる必要あり)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-control&#34;&gt;config.vm.synced_folder &amp;quot;c:\\vm\\share&amp;quot;, &amp;quot;/share&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;参考にしたページ&#34;&gt;※参考にしたページ&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/hiroyasu55/items/11a4c996b0c62450940f&#34; target=&#34;_blank&#34;&gt;インストール手順&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sakashushu.blog.so-net.ne.jp/2014-06-16&#34; target=&#34;_blank&#34;&gt;エラーの際に役立ったページ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jqGridで表示する値と元の値を分ける</title>
      <link>https://sankame.github.io/blog/2015-05-02-jqgrid_formatter/</link>
      <pubDate>Sat, 02 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2015-05-02-jqgrid_formatter/</guid>
      <description>

&lt;h5 id=&#34;0-環境&#34;&gt;0.環境&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;[jquery]     1.7.1
[jquery-ui]  1.10.3
[jqGrid]     4.5.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-コード&#34;&gt;1.コード&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;画面表示は formatter で定義し、処理では元の値を使いたいので unformat で定義します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    
jQuery(&amp;quot;#grid_id&amp;quot;).jqGrid({
    // 省略
    colModel: [
        // 省略
        {name:&#39;name&#39;, index:&#39;name&#39;, formatter: formatterName, unformat: unformatName},
        // 省略
    ]
    // 省略
});
    
/** リンクに変更 */
function formatterName(cellvalue, options, rowdata) {
    var val = &amp;quot;&amp;lt;a href=\&amp;quot;javascript:void(0);\&amp;quot; onclick=\&amp;quot;showItem(&#39;&amp;quot; + rowdata.item_id + &amp;quot;&#39;);\&amp;quot;&amp;gt;&amp;quot; + cellvalue + &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;;
    return val;
}
    
/** 加工しない元の値 */
function unformatName(cellvalue, options)
{
    return cellvalue;
}
    
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;2-参考&#34;&gt;2.参考&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://www.trirand.com/jqgridwiki/doku.php?id=wiki:custom_formatter&#34; target=&#34;_blank&#34;&gt;参考にしたページ&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ベーシック認証設定 (VirtualHostの場合)</title>
      <link>https://sankame.github.io/blog/2014-08-20-http_basic_authentication/</link>
      <pubDate>Wed, 20 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-08-20-http_basic_authentication/</guid>
      <description>

&lt;h5 id=&#34;0-環境&#34;&gt;0.環境&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;[CentOS]   5.6 (32bit版カーネル)
[Apache]   2.2.3
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-パスワードファイル作成&#34;&gt;1.パスワードファイル作成&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;適当な場所にパスワードファイルを作成。(&amp;ldquo;user1&amp;rdquo;は作成したいユーザー名で読み替え)&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	# htpasswd -c /etc/httpd/conf/.htpasswd user1
	
	New password: 
	
	Re-type new password: 
	
	Adding password for user user1
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-パスワードファイル設定&#34;&gt;2.パスワードファイル設定&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;VirtualHostを設定している場合、Directoryディレクティブ内に下記を追加。&lt;/p&gt;

&lt;p&gt;AuthUserFileには上記1で作ったパスワードファイルを指定。&lt;/p&gt;

&lt;p&gt;AuthNameはブラウザの認証ダイアログに表示されるメッセージとなります。&lt;/p&gt;

&lt;p&gt;(マルチバイト文字は化ける可能性あり)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;※下記はApache設定ファイル(/etc/httpd/conf/httpd.conf) の抜粋&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;NameVirtualHost *:80

&amp;lt;Directory /web/test&amp;gt;
    Options FollowSymLinks
    AllowOverride FileInfo Options=All,MultiViews
    
    # --- ベーシック認証追加 ---
    AuthType Basic
    AuthUserFile &amp;quot;/etc/httpd/conf/.htpasswd&amp;quot;
    AuthName &amp;quot;Here is a message.&amp;quot;
    Require valid-user
    # --- ベーシック認証追加 ---
    
&amp;lt;/Directory&amp;gt;

&amp;lt;VirtualHost *:80&amp;gt;
    ServerAdmin test@sample.co.jp
    DocumentRoot &amp;quot;/web/test&amp;quot;
    ServerName test.net
    ErrorLog logs/test.net-error_log
    CustomLog logs/test.net-access_log common
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;3-再起動&#34;&gt;3.再起動&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;最後にApacheを再起動します。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	# service httpd restart
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>【Android Wear】ホーム画面の時計を変更</title>
      <link>https://sankame.github.io/blog/2014-07-26-android_wear_chage_face/</link>
      <pubDate>Sat, 26 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-07-26-android_wear_chage_face/</guid>
      <description>

&lt;h5 id=&#34;0-環境&#34;&gt;0.環境&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;[スマートフォン(OS)]  GALAXY S4 (Android 4.4.2)
[スマートウォッチ(OS)] Gear Live (4.4W)
※以下、スマートフォンは「スマホ」、スマートウォッチは「ウォッチ」と記載。
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-ホーム画面の時計-ウォッチフェイス-を変更&#34;&gt;1.ホーム画面の時計(ウォッチフェイス)を変更&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Samsung Gear Live のホーム画面の時計デザインを変える方法は下記の通りです。&lt;/p&gt;

&lt;p&gt;(スマホとウォッチはBluetoothで同期されている前提)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;①【スマホ】Playストアから好みのデザインの時計アプリをインストールします。(&lt;a href=&#34;http://weekly.ascii.jp/elem/000/000/239/239437/&#34; target=&#34;_blank&#34;&gt;参考リンク&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;(例) Playストアで &amp;ldquo;WearFaces&amp;rdquo; で検索。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;②【スマホ】Android Wearアプリを起動し、右上のネジマークをタップ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/phone-1.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;20%&#34; height=&#34;20%&#34; title=&#34;スマホ-設定&#34; alt=&#34;スマホ-設定&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/phone-1.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;③【スマホ】一番下までスクロールし、「アプリの再同期」をタップ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/phone-2.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;20%&#34; height=&#34;20%&#34; title=&#34;スマホ-アプリ同期&#34; alt=&#34;スマホ-アプリ同期&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/phone-2.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;④【ウォッチ】ホーム画面をタップし、メニュー画面を一番下までスクロールした後「設定」をタップ。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(2014/07/30, 追記) 後日気づきました。ホーム画面で時計を長押し(ロングタップ)すると一気に時計変更画面に行けます。(下記⑦)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/watch-1.jpeg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;20%&#34; height=&#34;20%&#34; title=&#34;ウォッチ-設定&#34; alt=&#34;ウォッチ-設定&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/watch-1.jpeg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;⑤【ウォッチ】設定画面で上にフリック。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/watch-2.jpeg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;20%&#34; height=&#34;20%&#34; title=&#34;ウォッチ-設定2&#34; alt=&#34;ウォッチ-設定2&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/watch-2.jpeg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;⑥【ウォッチ】一番下までスクロールした後、「ウォッチフェイスの変更」をタップ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/watch-3.jpeg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;20%&#34; height=&#34;20%&#34; title=&#34;ウォッチ-ウォッチフェイス変更&#34; alt=&#34;ウォッチ-ウォッチフェイス変更&#34; src=&#34;https://sankame.github.io/assets/posts/img/android_wear_chage_face/watch-3.jpeg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;⑦【ウォッチ】上記でPlayストアからインストールした時計アプリを見つけ、タップするとホーム画面に設定されます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>開発環境用 NTP 設定</title>
      <link>https://sankame.github.io/blog/2014-06-25-ntp_for_dev/</link>
      <pubDate>Wed, 25 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-06-25-ntp_for_dev/</guid>
      <description>

&lt;h5 id=&#34;0-環境&#34;&gt;0.環境&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;  [VMware Player] 3.0.0
  [CentOS]        5.6 (32bit版カーネル) (Windows上でゲストOSとして使用)
  [NTP]           4.2.6
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-セットアップ&#34;&gt;1.セットアップ&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ソース取得&lt;/p&gt;

&lt;p&gt;任意のディレクトリにNTPのソース(ntpd)をダウンロード。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	# cd /usr/local/src/
	# wget http://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-4.2/ntp-4.2.6p5.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;インストール&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	# tar xzf ntp-4.2.6p5.tar.gz
	# cd ntp-4.2.6p5
	# ./configure
	# make
	# make install
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;設定&lt;/p&gt;

&lt;p&gt;下記URL①の設定を行ったところうまく時刻同期されませんでした。&lt;/p&gt;

&lt;p&gt;(VMwareをサスペンドすると時刻が離れ過ぎるため？)&lt;/p&gt;

&lt;p&gt;結局、自分用の開発環境で、ログイン時に1回同期させれば十分なので下記のようにしました。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;	# echo &#39;ntpdate -u ntp.nict.jp&#39; &amp;gt;&amp;gt; ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;2-参考url&#34;&gt;2.参考URL&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ipa.go.jp/security/awareness/administrator/secure-web/chap4/4_ntpd.html&#34; target=&#34;_blank&#34;&gt;①ntpdのインストールと設定&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.turbolinux.co.jp/products/server/11s/user_guide/x6278.html&#34; target=&#34;_blank&#34;&gt;②ntpd の起動と動作確認&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://tech.n-linux.com/index.php?%A5%C6%A5%AF%A5%CB%A5%AB%A5%EB%A5%CE%A1%BC%A5%C8%2FNTP%2FNTP%20%A5%B7%A5%EA%A1%BC%A5%BA%20%A5%D1%A1%BC%A5%C8%203%20ntpdate%20%A5%B3%A5%DE%A5%F3%A5%C9%A4%CB%A4%C4%A4%A4%A4%C6&#34; target=&#34;_blank&#34;&gt;③ntpdate コマンドについて&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://wiki.nothing.sh/page/NTP/%BF%E4%BE%A9%B8%F8%B3%AB%A5%B5%A1%BC%A5%D0&#34; target=&#34;_blank&#34;&gt;④推奨公開サーバ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GithubからBitbucketへソース移行</title>
      <link>https://sankame.github.io/blog/2014-06-21-github_to_bitbucket/</link>
      <pubDate>Sat, 21 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-06-21-github_to_bitbucket/</guid>
      <description>

&lt;h5 id=&#34;0-環境&#34;&gt;0.環境&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;  [CentOS]   5.6 (32bit版カーネル)
  [Git]      1.9.4
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-ダウンロード&#34;&gt;1.ダウンロード&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Githubのソース取得&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/github_to_bitbucket/1.github.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;githubリポジトリ&#34; alt=&#34;githubリポジトリ&#34; src=&#34;https://sankame.github.io/assets/posts/img/github_to_bitbucket/1.github.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;任意のディレクトリへ移動。&lt;/p&gt;

&lt;p&gt;GitHubのリポジトリから対象ソースを取得。(上図の画面右下がURL)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# git clone git@github.com:Sankame/repo-of-github.git&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;取得したソースの第1階層へ移動。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;# cd repo-of-github/&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bitbucketへソースアップ&lt;/p&gt;

&lt;p&gt;予めBitbucket上で任意のリポジトリを作っておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/github_to_bitbucket/2.bitbucket_make_repo.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;bitbucketリポジトリ作成&#34; alt=&#34;bitbucketリポジトリ作成&#34; src=&#34;https://sankame.github.io/assets/posts/img/github_to_bitbucket/2.bitbucket_make_repo.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;空のリポジトリができました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/github_to_bitbucket/3.bitbucket_new_repo.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;bitbucket新規リポジトリ&#34; alt=&#34;bitbucket新規リポジトリ&#34; src=&#34;https://sankame.github.io/assets/posts/img/github_to_bitbucket/3.bitbucket_new_repo.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記で GitHub から取得したソースは origin がGitHubになっているので、 Bitbucket へ変更。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# git remote -v
 origin  git@github.com:Sankame/repo-of-github.git (fetch) 
 origin  git@github.com:Sankame/repo-of-github.git (push)
     
 # git remote rm origin
 # git remote add origin git@bitbucket.org:Sankame/repo-of-bitbucket.git
 # git push -u origin --all # pushes up the repo and its refs for the first time
 # git push -u origin --tags # pushes up any tags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GithubのソースがBitbucketへ取り込まれました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/github_to_bitbucket/4.bitbucket_imported_repo.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;bitbucket取り込んだソース&#34; alt=&#34;bitbucket取り込んだソース&#34; src=&#34;https://sankame.github.io/assets/posts/img/github_to_bitbucket/4.bitbucket_imported_repo.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;※上記 &amp;quot;git remote add origin&amp;quot; でプロトコルにhttpsを指定していて、&amp;quot;git push&amp;quot; で下記エラーが出た場合は下記の「2.git pushが動かない場合」参照。&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fatal: Unable to find remote helper for &#39;https&#39;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;2-git-pushが動かない場合&#34;&gt;2.git pushが動かない場合&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Gitをhttpsへ対応させる&lt;/p&gt;

&lt;p&gt;下記URLを見るとcurl-develがないのが原因と書いてあったが、自分の環境には既に入っていたので、&lt;/p&gt;

&lt;p&gt;gitを再コンパイル＆インストールしたところうまくいきました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://clavier.hatenablog.com/entry/2013/05/18/204050&#34; target=&#34;_blank&#34;&gt;CentOSに最新のgitをインストールする&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;※gitのソースが手元にある場合は再取得しなくてもOKです。&lt;/p&gt;

&lt;p&gt;※rootで操作しているのでインストール時にprefix指定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# wget https://www.kernel.org/pub/software/scm/git/git-1.9.4.tar.gz
 # tar xzf git-1.9.4.tar.gz
 # cd git-1.9.4
 # ./configure
 # make clean
 # make
 # make prefix=/usr install
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ポイントだけ ApacheBench</title>
      <link>https://sankame.github.io/blog/2014-06-07-apache_bench/</link>
      <pubDate>Sat, 07 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-06-07-apache_bench/</guid>
      <description>

&lt;h5 id=&#34;0-環境&#34;&gt;0.環境&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;  [CentOS]      5.6 (32bit版カーネル)
  [Apache]      2.2.3
  [ApacheBench] 2.0.40-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-基本&#34;&gt;1.基本&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;実行&lt;/p&gt;

&lt;p&gt;Apacheをインストールすると ab というコマンドで負荷テストが行えます。&lt;/p&gt;

&lt;p&gt;主に使うのは2つのオプションで、下記のように実行します。&lt;/p&gt;

&lt;p&gt;後述の &amp;ldquo;Requests per second&amp;rdquo; が十分な値になるよう、n と c の値を増やして負荷をかけます。&lt;/p&gt;

&lt;p&gt;(n : リクエスト数　c : 同時接続数)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab -n 10000 -c 100 &amp;quot;http://test.vm/test.php&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※abでテストできるのはサーバ側の処理だけなので、HTMLレンダリングやJavascript実行等、&lt;/p&gt;

&lt;p&gt;　トータルの計測を行いたい場合は、下記のようなツールを検討して下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gtmetrix.com/&#34;&gt;GTmetrix&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://knowledge.sakura.ad.jp/tech/1599/&#34;&gt;PageSpeed&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;結果&lt;/p&gt;

&lt;p&gt;下記のような実行結果が表示されるので、主に2つの項目を確認します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Failed requests (失敗したリクエスト数)&lt;/p&gt;

&lt;p&gt;この項目が0であることを確認します。&lt;/p&gt;

&lt;p&gt;但し、表示毎にHTMLのバイト数が異なるサイトの場合、ここがカウントされ、さらに内訳を表す &amp;ldquo;Length:&amp;rdquo; もカウントされます。&lt;/p&gt;

&lt;p&gt;(1つ前の結果とHTMLのバイト数を比較し、異なる場合は Length がカウントされる仕様)&lt;/p&gt;

&lt;p&gt;上記のようなサイトの場合、&amp;rdquo;Failed requests&amp;rdquo; に数字があっても、全て Length が原因ならば無視してかまいませんが、&lt;/p&gt;

&lt;p&gt;念のため、Apacheのアクセスログを確認し、HTTP Response Code が全て200になっていることを確認して下さい。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Requests per second (秒間に処理したリクエスト数)&lt;/p&gt;

&lt;p&gt;対象WEBサイトのアクセス数などから算出した基準を達成しているか確認します。&lt;/p&gt;

&lt;p&gt;(例) 月間 1億 PVのサイトの場合、アクセスが均等という前提で、秒間 38.5 リクエストは達成する必要がありそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;100,000,000 / 30 / 24 / 60 / 60 ≒ 38.5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(注意) 下記 &amp;quot;ab 実行結果&amp;quot; は文字を表示するだけのページなので &amp;quot;Requests per second&amp;quot; はかなり高い数字になっています。&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ab 実行結果&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ab -n 10000 -c 100 &amp;quot;http://test.vm/test.php&amp;quot;

This is ApacheBench, Version 2.0.40-dev &amp;lt;$Revision: 1.146 $&amp;gt; apache-2.0
Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/
Copyright 2006 The Apache Software Foundation, http://www.apache.org/

Benchmarking test.vm (be patient)
Completed 1000 requests
Completed 2000 requests
Completed 3000 requests
Completed 4000 requests
Completed 5000 requests
Completed 6000 requests
Completed 7000 requests
Completed 8000 requests
Completed 9000 requests
Finished 10000 requests

Server Software:        Apache/2.2.3
Server Hostname:        test.vm
Server Port:            80

Document Path:          /test.php
Document Length:        80 bytes

Concurrency Level:      100
Time taken for tests:   5.772060 seconds
Complete requests:      10000
Failed requests:        9899
   (Connect: 0, Length: 9899, Exceptions: 0)
Write errors:           0
Total transferred:      2418216 bytes
HTML transferred:       499081 bytes
Requests per second:    1732.48 [#/sec] (mean)
Time per request:       57.721 [ms] (mean)
Time per request:       0.577 [ms] (mean, across all concurrent requests)
Transfer rate:          409.04 [Kbytes/sec] received

Connection Times (ms)
              min  mean[+/-sd] median   max
Connect:        0    0   0.3      0       6
Processing:     5   56 112.2     55    5769
Waiting:        5   54  77.3     55    4398
Total:          5   57 112.2     55    5769

Percentage of the requests served within a certain time (ms)
  50%     55
  66%     56
  75%     58
  80%     59
  90%     62
  95%     69
  98%     77
  99%    284
 100%   5769 (longest request)
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;2-応用&#34;&gt;2.応用&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;コマンドサンプル&lt;/p&gt;

&lt;p&gt;他によく使うオプションを記載しておきます。&lt;/p&gt;

&lt;p&gt;Cookieを指定。(C : [Cookie名]=[値])&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab -n 100 -c 10 -C &#39;id=test&#39; &amp;quot;http://test.vm/test.php&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;複数のCookieを指定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ab -n 100 -c 10 -C &#39;id=test;flag=1&#39; &amp;quot;http://test.vm/test.php&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;host名の指定が必要な場合&lt;/p&gt;

&lt;p&gt;host名の指定が必須のWEBサイトで、かつ ab 実行環境で /etc/hosts に記載ができない場合、&lt;/p&gt;

&lt;p&gt;下記のようにヘッダオプション(-H) と Host を使います。&lt;/p&gt;

&lt;p&gt;これに対応した ab はApache 2.2.22 以降で、自分の環境は未対応だったのでソースを落としてきてビルドしました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;(注意) ab を使うだけなので、Apacheのインストール(make install)は行わない。&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /usr/local/src/
# wget http://ftp.meisei-u.ac.jp/mirror/apache/dist//httpd/httpd-2.2.27.tar.gz
# tar xzf httpd-2.2.27.tar.gz
# cd httpd-2.2.27
# ./configure
# make
# 
# /usr/local/src/httpd-2.2.27/support/ab -n 100 -c 10 -H &#39;Host: test.vm&#39; &amp;quot;http://192.168.130.130/test.php&amp;quot;
#
# /usr/local/src/httpd-2.2.27/support/ab -V
#This is ApacheBench, Version 2.3 &amp;lt;$Revision: 655654 $&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins から Seleniumを動かしてみる</title>
      <link>https://sankame.github.io/blog/2014-06-04-jenkins_selenium/</link>
      <pubDate>Wed, 04 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-06-04-jenkins_selenium/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0.環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;・親ノード端末
  [CentOS]   5.6 (32bit版カーネル)
  [ruby]     2.1.1p76
  [rvm]      1.25.25
  [java]     1.7.0_51
  [Jenkins]  1.562

・子ノード端末
  [Windows]  Vista Home Premium (32bit)
  [java]     1.7.0_51
  [IE]       8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-準備&#34;&gt;1.準備&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Jenkinsインストール&lt;/p&gt;

&lt;p&gt;下記のリンクを参考にJenkinsをインストールしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/katsuren/20121030/1351569655&#34;&gt;俺の成長日記&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://oscasierra.net/2013/05/jenkins-to-redhat/&#34;&gt;OSCALOG&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kohkimakimoto.hatenablog.com/entry/2013/11/22/192646&#34;&gt;JenkinsをCentOSにインストールしたときのメモ&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;前回の続き&lt;/p&gt;

&lt;p&gt;親ノードと子ノードでSelenium Serverを起動します。(下記リンク参照)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/Selenium/2014/05/24/selenium_webdriver/&#34;&gt;Selenium WebDriverを動かしてみる&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;前回と異なる点は、Jenkinsがポート4444を使っていたので、Selenium Serverは4445を使って起動します。&lt;/p&gt;

&lt;p&gt;・親ノード&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    # java -jar selenium-server-standalone-2.41.0.jar -role hub -port 4445
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;・子ノード&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    &amp;gt; java -jar selenium-server-standalone-2.41.0.jar -role webdriver -hub http://192.168.130.130:4445/grid/register -Dwebdriver.ie.driver=./IEDriverServer.exe
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins プラグイン追加&lt;/p&gt;

&lt;p&gt;rvmでrubyを使っているので、予めJenkinsにrvmプラグインを追加。&lt;/p&gt;

&lt;p&gt;Jenkinsのダッシュボードから[Jenkinsの管理]-[プラグインの管理]-[利用可能]&lt;/p&gt;

&lt;p&gt;右上のフィルターでrvmと打つとRVMプラグインが表示されるのでチェックをつけ、[再起動せずにインストール]クリック。&lt;/p&gt;

&lt;p&gt;(インストールは何回か失敗することがあります)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Jenkins ジョブ追加&lt;/p&gt;

&lt;p&gt;Jenkinsのダッシュボードから[新規ジョブ作成]、ジョブ名を入力し、[フリースタイル・プロジェクトのビルド]を選択して[OK]クリック。&lt;/p&gt;

&lt;p&gt;ビルド環境のRVMで使用したいrubyのバージョンを指定。(自分の場合 2.1.1) (下図参照)&lt;/p&gt;

&lt;p&gt;シェルスクリプトで下記のように指定。(パス等は読み替えて下さい) (下図参照)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/rvm/rubies/ruby-2.1.1/bin/ruby /app/seleniumtest/seleniumtest_4445.rb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「保存」ボタンクリック。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/jenkins_selenium/jenkins_project.png&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;Jenkinsプロジェクト設定&#34; alt=&#34;Jenkinsプロジェクト設定&#34; src=&#34;https://sankame.github.io/assets/posts/img/jenkins_selenium/jenkins_project.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;rubyスクリプト&lt;/p&gt;

&lt;p&gt;上記でJenkinsに設定した &amp;ldquo;seleniumtest_4445.rb&amp;rdquo; は以下の内容です。(ポート番号4445でアクセス)&lt;/p&gt;

&lt;p&gt;{% gist dc5fb2d680b67acefbf3 seleniumtest_4445.rb%}&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-起動&#34;&gt;2.起動&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ビルド実行&lt;/p&gt;

&lt;p&gt;上記で作成したジョブで「ビルド実行」をクリック。&lt;/p&gt;

&lt;p&gt;子ノードでIEが起動すれば成功です。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Selenium WebDriverを動かしてみる</title>
      <link>https://sankame.github.io/blog/2014-05-24-selenium_webdriver/</link>
      <pubDate>Sat, 24 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-05-24-selenium_webdriver/</guid>
      <description>

&lt;h5 id=&#34;0-環境&#34;&gt;0.環境&lt;/h5&gt;

&lt;pre&gt;&lt;code&gt;・親ノード端末
  [CentOS]   5.6 (32bit版カーネル)
  [ruby]     2.1.1p76
  [rvm]      1.25.25
  [java]     1.7.0_51

・子ノード端末
  [Windows]  Vista Home Premium (32bit)
  [java]     1.7.0_51
  [IE]       8
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;1-準備&#34;&gt;1.準備&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;動機&lt;/p&gt;

&lt;p&gt;ブラウザテストの自動化に興味があり、面白そうな記事があったので自分でも試してみました。&lt;/p&gt;

&lt;p&gt;(Jenkinsとの連携は今回やっていません)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.takuros.net/entry/20130305/1362437720&#34;&gt;JenkinsとSelenium WebDriverでUI層のテストも自動化＆永続化する&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;親ノード&lt;/p&gt;

&lt;p&gt;親ノード端末の適当なディレクトリに Selenium Server をダウンロード後、起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cd /usr/local/bin/
# wget http://selenium-release.storage.googleapis.com/2.41/selenium-server-standalone-2.41.0.jar
# java -jar selenium-server-standalone-2.41.0.jar -role hub
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;子ノード&lt;/p&gt;

&lt;p&gt;子ノード端末の適当なフォルダに Selenium Server とIEドライバーをダウンロード後、起動します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.seleniumhq.org/download/&#34;&gt;ダウンロードサイト&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず、&amp;rdquo;Selenium Server (formerly the Selenium RC Server)&amp;rdquo; をダウンロード。&lt;/p&gt;

&lt;p&gt;次に、&amp;rdquo;The Internet Explorer Driver Server&amp;rdquo; をダウンロード。&lt;/p&gt;

&lt;p&gt;(アーキテクチャによって32bitまたは64bitを選択)&lt;/p&gt;

&lt;p&gt;コマンドプロンプトを開いて、ダウンロードしたフォルダに移動し Selenium Server を起動。&lt;/p&gt;

&lt;p&gt;(192.168.130.130 は自分の環境の親ノードIPに読み替え)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; cd C:\apps\selenium
&amp;gt; java -jar selenium-server-standalone-2.41.0.jar -role webdriver -hub http://192.168.130.130:4444/grid/register -Dwebdriver.ie.driver=./IEDriverServer.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IEドライバーを起動するには、IEの[ツール]-[インターネットオプション]-[セキュリティ]で全ての&lt;/p&gt;

&lt;p&gt;ゾーンの「保護モード」を同じにしておく必要があります。&lt;a href=&#34;https://selenium.googlecode.com/issues/attachment?aid=17950019000&amp;amp;name=1.png&amp;amp;token=ABZ6GAdCiZEHCiZBk5mmjW1I9awHy0ZHtQ%3A1400944855099&amp;amp;inline=1&#34;&gt;画面キャプチャ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/Kackey/items/c5dded9a6762c1a8cccf&#34;&gt;参考記事&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;2-起動&#34;&gt;2.起動&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;IE起動&lt;/p&gt;

&lt;p&gt;親ノード端末に置いたプログラムから、子ノード端末のIEを起動します。&lt;/p&gt;

&lt;p&gt;親ノード端末の適当なディレクトリに下記スクリプトを配置。&lt;/p&gt;

&lt;p&gt;(192.168.130.130 は自分の環境の親ノードIPに読み替え)&lt;/p&gt;

&lt;p&gt;{% gist 105475ff842cd9bf6ad6 seleniumtest.rb%}&lt;/p&gt;

&lt;p&gt;スクリプト内で selenium-webdriver を使っているので、予めインストールしておきます。&lt;/p&gt;

&lt;p&gt;(適当なディレクトリへ移動し、依存関係を気にしたくないのでbundleを使ってインストール)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# bundle init
# echo &amp;quot;gem &#39;selenium-webdriver&#39;&amp;quot; &amp;gt;&amp;gt; Gemfile
# bundle install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プログラムを実行し、子ノード端末でIEが起動すれば成功です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ruby /app/seleniumtest/seleniumtest.rb
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>