<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラミング on プログラマー備忘録</title>
    <link>https://sankame.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/</link>
    <description>Recent content in プログラミング on プログラマー備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 05 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sankame.github.io/categories/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>品質管理とUnitTest(Laravel&#43;PHPUnit&#43;Mockeryによるサンプルコード付き)</title>
      <link>https://sankame.github.io/blog/2020-05-05-laravel_phpunit_mockery/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2020-05-05-laravel_phpunit_mockery/</guid>
      <description>環境 [OS] Debian 10
[PHP] 7.3.13
[Laravel] 7.6.2
[PHPUnit] 8.5.3
[Mockery] 1.3.1
はじめに ソフトウェアやアプリケーション開発にとって品質管理は切っても切り離せない存在です。 日本の従来の品質管理は散布図やPB曲線などを用いて定量化を重視してきました。
しかし、それらは品質を数値化し分析することに寄りすぎていると感じるのは僕だけでしょうか？ 品質管理の本来の目的は「品質を上げること」にあるはずです。
一言で品質と言っても様々ですが、「品質 = 要求仕様に則った実装」と定義すると、品質向上のための必要十分な施策はUnitTestによるホワイトボックステストが一番の近道だと考えています。 実際、ネットの情報を見ても、Googleなどのテック企業はUnitTestを中心に据えているように見えます。 その上で、報告などの目的でどうしても品質を定量化したいのであれば、UnitTestのカバレッジ計測ツールを使ったら良いのではないでしょうか。
1. 方針 下記の方針でユニットテストを書いていきますが、自分のプロジェクトと合わない部分は変えて下さい。
 1-1. 後々CIで動かすことも考慮し、DB接続はモックで代替する。 1-2. フレームワークを含めず実装した箇所だけのテストコードを書く。 1-3. プロダクションコードの全ロジックを通すテストコードを書く。(「3. テスト記載方法」で後述) 1-4. 上記1-2の範囲でツールを用いてカバレッジを計測し、なるべく100%に近づける。(一般的にツールは評価が甘めのため) 1-5. テストコードの構成はフレームワークやデファクトスタンダードに合わせる。  2. 設定 2-1. PHPUnit  LaravelにはPHPUnitが最初から入ってるので、アプリのルートで下記コマンドを実行するとサンプルのテストコードが実行されます。
composer exec -v phpunit  アプリルートにあるtestsディレクトリにテストコードを格納していきます。同ディレクトリ内はさらにFeatureとUnitに分かれてます。
tests |-- CreatesApplication.php |-- Feature | `-- ExampleTest.php |-- TestCase.php `-- Unit `-- ExampleTest.php   Laravelの方針に合わせて、下記の区分けでテストを書いていきます。
 Feature</description>
    </item>
    
    <item>
      <title>Swift3の大文字・小文字処理</title>
      <link>https://sankame.github.io/blog/2017-01-03-swift3_uppercase_lowercase/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-01-03-swift3_uppercase_lowercase/</guid>
      <description> &amp;nbsp;更新日：2017年01月27日
0. 環境 [Swift] 3.0.2  1. 大文字・小文字処理  Swift3から大文字・小文字の処理は下記のようになります。
(明示的にするため入れていますが型宣言は省略可)
    上記コードはIBM Swift Sandboxで動かせます。
下記リンク先の真ん中にある三角ボタンをクリックして下さい。
Swift3で大文字・小文字処理
(ChromeまたはFirefox推奨)
  2. 参考ページ  caseInsensitiveCompare
 localizedCaseInsensitiveCompare
  </description>
    </item>
    
    <item>
      <title>Swift3のforループ</title>
      <link>https://sankame.github.io/blog/2016-12-30-swift3_loop/</link>
      <pubDate>Fri, 30 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-12-30-swift3_loop/</guid>
      <description> &amp;nbsp;更新日：2017年02月09日
0. 環境 [Swift] 3.0.2  1. ループ  Swift3からループ処理は下記のようになります。    上記コードはIBM Swift Sandboxで実際に動かすことができます。
下記リンク先の真ん中にある三角ボタンをクリックして下さい。
Swift3でのforループ
(ChromeまたはFirefox推奨)
  </description>
    </item>
    
    <item>
      <title>トグル処理を楽に実装 (ビット演算)</title>
      <link>https://sankame.github.io/blog/2016-05-27-bitwise_operator_toggle/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-05-27-bitwise_operator_toggle/</guid>
      <description> 0. 環境 [CentOS] 6.4 (64bit版カーネル) [PHP] 5.4.17  1. XORでトグル処理  押すたびにON/OFFが切り替わるようなトグル処理を実装する場合はXORが便利です。
 6行目、11行目 : 「XOR 1」するとビットが反転する性質を利用します。(下記)
XOR
入力①0011 入力②0101 出力0110   </description>
    </item>
    
    <item>
      <title>状態管理を楽に実装 (ビット演算)</title>
      <link>https://sankame.github.io/blog/2016-05-27-bitwise_operator_status_control/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-05-27-bitwise_operator_status_control/</guid>
      <description> 0. 環境 [CentOS] 6.4 (64bit版カーネル) [PHP] 5.4.17  1. ORとANDで状態管理  複数の状態や権限をまとめて管理したい場合、2進数が便利です。
 2-5行目 : 2進数の定数(10進数表記)を用意します。
7行目 : ORでプログラミング言語を足していきます。
Aさんが使える言語の位にビットが立つイメージです。(下記)
 0001 (PHP) 0010 (Ruby) OR) 1000 (Perl) ---------- 1011 (Aさんが使えるプログラミング言語)  11行目以降 : Aさんが使えるプログラミング言語は何か、ANDで問い合わせます。
右端の位にビットが立っていれば結果がtrueになり、PHPが使えることが分かります。(下記)
 1011 (Aさんが使えるプログラミング言語) AND) 0001 (PHP) ---------- 0001 (PHPが使える)   </description>
    </item>
    
    <item>
      <title>プログラミング問題A</title>
      <link>https://sankame.github.io/blog/2015-12-31-programming_practice_a/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2015-12-31-programming_practice_a/</guid>
      <description> 環境 [CentOS] 5.6 (32bit版カーネル) [PHP] 5.4.17  問題A-1  10進数の任意の値をn進数に変換する関数を作成して下さい。(nは1～16の正の整数)
 サンプルはPHP。
  サンプルA-1  実行方法
$ php changeDecimalToBaseN.php  ソース
  </description>
    </item>
    
    <item>
      <title>PHPサンプル isset関数化</title>
      <link>https://sankame.github.io/blog/2012-12-28-php_sample_viaisset/</link>
      <pubDate>Fri, 28 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2012-12-28-php_sample_viaisset/</guid>
      <description> &amp;ldquo;Undefined index&amp;rdquo; Noticeを防ぐためのissetが冗長なので関数化。  </description>
    </item>
    
  </channel>
</rss>