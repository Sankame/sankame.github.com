<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>プログラマー備忘録</title>
    <link>https://sankame.github.io/index.xml</link>
    <description>Recent content on プログラマー備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [hugo-theme-wave](https://github.com/syui/hugo-theme-wave).</copyright>
    <lastBuildDate>Mon, 14 Aug 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://sankame.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【Java】Listから配列へ変換</title>
      <link>https://sankame.github.io/blog/2017-08-14-java_list_to_array/</link>
      <pubDate>Mon, 14 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-08-14-java_list_to_array/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0.環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Java] 1.8
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-内容&#34;&gt;1. 内容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;いつも忘れるので、JavaでList型からString型配列へ変換する方法をメモ。&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/9fba3734d8c3c061215221ac8f81aaae.js&#34;&gt;&lt;/script&gt;
</description>
    </item>
    
    <item>
      <title>AndroidのSQLite DBを参照</title>
      <link>https://sankame.github.io/blog/2017-05-14-view_sqlite_on_android/</link>
      <pubDate>Sun, 14 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-05-14-view_sqlite_on_android/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2017年05月16日&lt;/span&gt;&lt;/p&gt;

&lt;h1 id=&#34;0-環境&#34;&gt;0.環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;PC側&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[OS]             Windows7 (32bit 版)
[Android Studio] 1.5.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;スマホ側&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[OS]             Android 5.1.1
[SQLite]         3.8.6.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;1-前提&#34;&gt;1. 前提&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;まずSQLiteのデータをファイル形式で保存するよう設定します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;例として、SQLiteを操作するライブラリにSQLiteOpenHelperを使用した場合について記載します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;コンストラクタの第二引数でDBファイル名を指定します。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(未指定の場合、データはメモリにのみ保持されます)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;class DatabaseHelper extends SQLiteOpenHelper {

    public DatabaseHelper(Context context) {
        //DBファイル名を指定。
        super(context, &amp;quot;example.db&amp;quot;, null, 1);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCからAndroid端末にあるSQLiteのDBファイルを見る方法を調べました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;試行錯誤した内容を書いているため、結論だけ知りたい場合は、4まで読み飛ばして下さい。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-adb-androidデバッグ用インターフェース-利用&#34;&gt;2. ADB(Androidデバッグ用インターフェース) 利用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ネットを検索して結構あったのが、ADBを使ってSQLiteのDBファイルをAndroid端末からPCへコピーし、その後DBビューワーで参照するというものです。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;PCでコマンドプロンプトから下記コマンドを実行すると、カレントディレクトリにtarget.db(任意)というファイルができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;C:\Users\【ユーザー名】&amp;gt;adb -d shell &amp;quot;run-as 【アプリケーションID】 cat databases/【DBファイル名】&amp;quot;&amp;gt;target.db
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;【】内は読み替えて下さい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;【アプリケーションID】: Android Studioの[File]-[Project Structure]-[Flavors]-[Application Id]&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;【DBファイル名】: 上記1で指定したファイル名。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Database BrowserやPupSQLiteというビューワーでtarget.dbを開いても、下記エラーが出てレコードが表示されません。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;database disk image is malformed&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://qiita.com/tsunet111/items/2c21706fd67f5ecb047d&#34; target=&#34;_blank&#34;&gt;この修復方法&lt;/a&gt;を試しましたが次のエラーが出て、上記ビューワーで見てもレコードが0件でした。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;Error: near line 6: NOT NULL constraint failed: 【テーブル名】.【カラム名】
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Android(Linux系)とWindowsだからリダイレクションでデータの受け渡しがうまくいってないのかな？と推測し、Linuxコマンドも使えるPower Shellを使ってみたところ、最初の結果と異なり、target.dbのファイルサイズは倍になりました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;再度、上記のビューワーで開こうとしたところ、復号化パスワードを求められ開けませんでした…&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;3-android-device-monitor-利用&#34;&gt;3. Android Device Monitor 利用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;方針を変え、Android Studioの付属ツールを使ってDBファイルをPCへコピーする方法を試しました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Android Studioのメニューで[Tools]-[Android]-[Android Device Monitor]-[File Explorer]タブ
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;data&amp;rdquo;ディレクトリはあるのですが、その下のディレクトリが表示されず、DBファイルまでたどり着けなかったため諦めました。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;4-stetho-利用&#34;&gt;4. stetho 利用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;facebookが提供している&lt;a href=&#34;https://github.com/facebook/stetho&#34; target=&#34;_blank&#34;&gt;stetho&lt;/a&gt;というデバッグツールを使いました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;(4-1) 準備&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://facebook.github.io/stetho/#download&#34; target=&#34;_blank&#34;&gt;このページ&lt;/a&gt;からjarをダウンロードし、下記ディレクトリへコピーします。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[アプリのルート]-[mobile]-[libs]&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;僕のbuild.gradleは、もともとlibsの全jarを読み込み対象にしていたのでひとまずそのままにしました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(build.gradle抜粋)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    dependencies {
        compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
        wearApp project(&#39;:wear&#39;)
        compile &#39;com.android.support:appcompat-v7:21.0.3&#39;
        compile &#39;com.google.android.gms:play-services:6.5.87&#39;
        compile &amp;quot;com.android.support:support-v4:20.0.+&amp;quot;
        compile files(&#39;libs/gson-2.5.jar&#39;)
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さらに、ソースコードへ下記①、②を追記します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//①
import com.facebook.stetho.Stetho;

public class MainActivity extends ActionBarActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        //②
        Stetho.initializeWithDefaults(this);

        // 以下省略
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(4-2) エラー対応&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ビルドしたところ、下記エラーが発生しました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ライブラリを重複して読み込もうとする際に出るエラーのようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;:mobile:dexDebug
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;UNEXPECTED TOP-LEVEL EXCEPTION:&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;com.android.dex.DexException: Multiple dex files define Landroid/support/v7/appcompat/R$anim;&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.readSortableTypes(DexMerger.java:596)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.getSortedTypes(DexMerger.java:554)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.mergeClassDefs(DexMerger.java:535)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.mergeDexes(DexMerger.java:171)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.merge.DexMerger.merge(DexMerger.java:189)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.dexer.Main.mergeLibraryDexBuffers(Main.java:454)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.dexer.Main.runMonoDex(Main.java:303)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.dexer.Main.run(Main.java:246)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.dexer.Main.main(Main.java:215)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}
AGPBI: {&amp;quot;kind&amp;quot;:&amp;quot;simple&amp;quot;,&amp;quot;text&amp;quot;:&amp;quot;\tat com.android.dx.command.Main.main(Main.java:106)&amp;quot;,&amp;quot;sources&amp;quot;:[{}]}

FAILED

FAILURE: Build failed with an exception.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;下記のようにbuild.gradleを変更し、stethoを個別に定義するようにしました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;s&gt;さらに上記エラーメッセージの3行目から推測して、除外設定も追加しています。(&lt;a href=&#34;http://stackoverflow.com/questions/27719436/how-to-remove-duplicate-libraries-added-via-gradle/27773664&#34; target=&#34;_blank&#34;&gt;参考ページ&lt;/a&gt;)&lt;/s&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;font color=&#34;red&#34;&gt;(2017/05/16,追記)除外設定はなくてもOKでした。まだ追いきれてませんが、fileTreeによる指定がまずかったようです。&lt;/font&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(build.gradle抜粋)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;dependencies {
    //この指定はやめる。
    //compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
    wearApp project(&#39;:wear&#39;)
    compile &#39;com.android.support:appcompat-v7:21.0.3&#39;
    compile &#39;com.google.android.gms:play-services:6.5.87&#39;
    compile &amp;quot;com.android.support:support-v4:20.0.+&amp;quot;
    compile files(&#39;libs/gson-2.5.jar&#39;)
                
    //これを含めるのはデバッグ時のみにし、重複エラーが出たので除外設定を追加。
    //debugCompile (&#39;com.facebook.stetho:stetho:1.5.0&#39;) {
    //  exclude group: &#39;android.support&#39;, module: &#39;library&#39;
    //}
                
    //(2017/05/16,追記) この指定で十分でした。
    debugCompile (&#39;com.facebook.stetho:stetho:1.5.0&#39;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;(4-3) 使い方&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;アプリをビルドして、Chromeのアドレスバーに下記URLを入力します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chrome://inspect&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Android端末名の下にアプリ名が表示されるので、&amp;rdquo;inspect&amp;rdquo;をクリック。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/view_sqlite_on_android/chrome.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;80%&#34; height=&#34;80%&#34; title=&#34;chrome&#34; alt=&#34;chrome&#34; src=&#34;https://sankame.github.io/assets/posts/img/view_sqlite_on_android/chrome.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;新しいウィンドウが開き、[Web SQL]-【アプリケーションID】-【テーブル名】を開くとSQLiteのデータが参照できました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さらに、【アプリケーションID】をクリックすると右ペインにプロンプト(&amp;gt;)が表示され、そこでSQL文も実行できるのでかなり使えそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/view_sqlite_on_android/view_sqlite_db.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;80%&#34; height=&#34;80%&#34; title=&#34;chrome&#34; alt=&#34;chrome&#34; src=&#34;https://sankame.github.io/assets/posts/img/view_sqlite_on_android/view_sqlite_db.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Webサイト・スピードアップ - ブラウザキャッシュ利用</title>
      <link>https://sankame.github.io/blog/2017-04-16-speed_up_website_use_browser_cache/</link>
      <pubDate>Sun, 16 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-04-16-speed_up_website_use_browser_cache/</guid>
      <description>

&lt;h3 id=&#34;0-前提&#34;&gt;0. 前提&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;環境などの前提条件は&lt;a href=&#34;https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/&#34; target=&#34;_blank&#34;&gt;前回の1から3&lt;/a&gt;と同じです。&lt;/p&gt;

&lt;p&gt;今回は&lt;a href=&#34;https://www.codeproject.com/Articles/26376/Speed-Up-Your-Website-By-Example&#34; target=&#34;_blank&#34;&gt;教科書&lt;/a&gt;の[1. Reduce number of HTTP requests]-[Use Browser Cache]をやってみました。&lt;/p&gt;

&lt;p&gt;修正が少ない静的ファイルはブラウザキャッシュの期間を延ばし、2回目以降のアクセスはキャッシュから読み込むことで速度向上につなげます。&lt;/p&gt;

&lt;p&gt;作業は下記の2点です。&lt;/p&gt;

&lt;p&gt;(1) キャッシュ期間延長&lt;/p&gt;

&lt;p&gt;　Webサーバーの設定でjs、cssのブラウザ・キャッシュ期間を延ばします。&lt;/p&gt;

&lt;p&gt;(2) ファイル名のユニーク化&lt;/p&gt;

&lt;p&gt;　上記1によって修正がすぐに反映されないという状況を避けるため、ファイル名に修正ごとのハッシュ値を付けてキャッシュが効かないようにします。(gulpの機能を利用)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-キャッシュ期間延長&#34;&gt;1. キャッシュ期間延長&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;nginxの設定ファイルにjs、cssの設定とキャッシュ期間を追記しました。&lt;/p&gt;

&lt;p&gt;記述が冗長なのは追って別の書き方を調べたいと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {
        listen 443 ssl;
        server_name [ドメイン名];
        ssl_certificate [ファイルパス];
        ssl_certificate_key [ファイルパス];

        location / {
            proxy_pass http://[ホスト名]:[ポート番号];
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header Host $host;
        }

        # --- css/jsの指定を追加。 ---
        location ~* .(css|js)$ {
            proxy_pass http://[ホスト名]:[ポート番号];
            proxy_set_header X-Real-IP  $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_set_header X-Forwarded-Port 443;
            proxy_set_header Host $host;
            # キャッシュ期間を設定。
            expires 365d;
        }
        # --- css/jsの指定を追加。 ---
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ChromeのDeveloper Toolsで見て、Expiresヘッダーの追加とjs、cssがキャッシュから読み込まれていることを確認します。(下図オレンジの枠線)&lt;/p&gt;

&lt;p&gt;(注)キャプチャのタイミングに数日のズレあり、また下記2まで対応した後のためファイル名も変更済み。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;変更前&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/before.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;70%&#34; height=&#34;70%&#34; title=&#34;変更前&#34; alt=&#34;変更前&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/before.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;変更後
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/after.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;70%&#34; height=&#34;70%&#34; title=&#34;変更後&#34; alt=&#34;変更後&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/after.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-ファイル名のユニーク化&#34;&gt;2. ファイル名のユニーク化&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;作業にかかろうと思ったら、gulpコマンドが実行できなくなっていたので、それも記載しておきます。&lt;/p&gt;

&lt;p&gt;Webアプリのルートディレクトリでgulpを実行すると下記メッセージが表示されました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gulp
-bash: gulp: command not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前回設定したnodebrewへのパスが消えているようです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo $PATH | grep nodebrew
$
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sourceで再読み込みすればgulpコマンドも使えるのですが、毎回やるのは面倒です。&lt;/p&gt;

&lt;p&gt;Macだと.bashrcがターミナル起動時に読み込まれないようなので、.bash_profileに設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;末尾にこれを追記します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if [ -f ~/.bashrc ]; then
  . ~/.bashrc
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;さて、気を取り直して本題です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/gulp_handle_files.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;70%&#34; height=&#34;70%&#34; title=&#34;gulpファイル操作&#34; alt=&#34;gulpファイル操作&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/gulp_handle_files.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;gulpを使って上記のファイル操作を行います。&lt;font color=&#34;green&#34;&gt;(*1)&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;① これから出力するファイルを予め削除。&lt;/p&gt;

&lt;p&gt;② jsファイルを圧縮、結合。&lt;/p&gt;

&lt;p&gt;③ ファイル名にハッシュ値を付け、さらに変換内容をrev-manifest.jsonに記録。&lt;/p&gt;

&lt;p&gt;④ rev-manifest.jsonを元に、オリジナルファイル(simple-cal.orgディレクトリ配下)内のjsファイル名を置換したファイルをViewsディレクトリに配置。この時、オリジナルは変更されません。また、プログラムから使用されているのはViewsディレクトリ配下のものだけです。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(*1)&lt;/font&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;実際はsimple-calの下にcssディレクトリもありますがスペースの都合で省略。
ディレクトリ構造はフレームワークに依存するので、適宜読み替えて下さい。
拡張子stencilはHTMLを生成するためのViewファイルです。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この処理を行うため、下記のgulpfile.jsをWebアプリのルートディレクトリに置き、&lt;a href=&#34;https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/&#34; target=&#34;_blank&#34;&gt;前回&lt;/a&gt;から追加で必要なプラグインをインストールした後、gulpコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install --save-dev gulp-clean gulp-rev gulp-rev-replace
$ 
$ gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/cbe3bb65777cdeacd381ce2cde18fe6d.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;各タスクの関連については、下図を参照して下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/&#34; target=&#34;_blank&#34;&gt;前回&lt;/a&gt;から改善して、タスクの同期・非同期を明確にしました。&lt;/p&gt;

&lt;p&gt;矢印の集約が同期ポイントで、例えばrev-replaceはjs-revとcss-revの完了を待ってから開始します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/gulp_task_flow.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;70%&#34; height=&#34;70%&#34; title=&#34;gulpタスクフロー&#34; alt=&#34;gulpタスクフロー&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_use_browser_cache/gulp_task_flow.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;その他として、僕が使っているフレームワークのようにViewの拡張子(.stencil)が一般的ではない場合、gulp-rev-replaceで置換できないということが起きます。&lt;/p&gt;

&lt;p&gt;これについては&lt;a href=&#34;https://github.com/jamesknelson/gulp-rev-replace#user-content-optionsreplaceinextensions&#34; target=&#34;_blank&#34;&gt;仕様&lt;/a&gt;を確認した後、replaceInExtensionsオプションの指定で解決できました。(上記gulpfile.jsに記載済み)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-結果&#34;&gt;7.結果&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここまでやって前後の比較をしたところ、Chromeで下記の結果になりました。&lt;/p&gt;

&lt;p&gt;やはり転送量が大きく削減されていますね。&lt;/p&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34;&gt;
&lt;tr bgcolor=&#34;#fff5ee&#34;&gt;
    &lt;th width=&#34;20%&#34;&gt;&lt;/th&gt;
    &lt;th&gt;Before&lt;/th&gt;
    &lt;th&gt;After&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;Load&lt;br&gt;(5回の平均)&lt;/td&gt;
    &lt;td&gt;2.7秒&lt;/td&gt;
    &lt;td&gt;1.9秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;転送量&lt;/td&gt;
    &lt;td&gt;451KB&lt;/td&gt;
    &lt;td&gt;34KB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;リクエスト数&lt;/td&gt;
    &lt;td&gt;19&lt;/td&gt;
    &lt;td&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Hugoクイックスタート</title>
      <link>https://sankame.github.io/blog/2017-03-19-hugo_quickstart/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-03-19-hugo_quickstart/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[Hugo] 0.19
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-インストール&#34;&gt;1.インストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここ数年、ブログウェアはjekyllを使ってましたが、下記の点が不便だったので、評判の良いHugoを試してみました。まずはサンプルを動かすところまで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初期構築やバージョンアップが大変だったので、他のPCに環境を作る気になれない。(今ならDockerという手もありますが…)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事の生成に時間がかかるようになってきた。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事の更新後、2～3回リロードしないとブラウザに反映されない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tutorials/installing-on-mac/&#34; target=&#34;_blank&#34;&gt;インストール・マニュアル&lt;/a&gt;に従って進めました。&lt;/p&gt;

&lt;p&gt;僕の場合、Homebrewは既に入っていたのでStep2からやりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew update
    
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「インストール後にバージョンを調べてね」と書いてあるので念のためチェックです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls -l $( which hugo )
lrwxr-xr-x  1 mx  admin  28  3 19 03:08 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.19/bin/hugo
    
$ hugo version
Hugo Static Site Generator v0.19 darwin/amd64 BuildDate: 2017-02-27T19:21:29+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2行とも0.19なので問題なさそうです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-サンプル作成&#34;&gt;2.サンプル作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;に沿ってサンプルを作成しました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;適当なディレクトリで下記を実行します。(僕の場合 /app/hugo-test/ なので読み替えて下さい)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /app/hugo-test/
    
$ hugo new site bookshelf
    
$ cd bookshelf/
    
$ tree -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目的別のディレクトリが作成されていると思います。&lt;/p&gt;

&lt;p&gt;treeコマンドが使えない場合、下記でインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプル記事を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo new post/good-to-great.md
/app/hugo-test/bookshelf/content/post/good-to-great.md created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらにGitHubから適当なテーマを取得。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd themes/

$ git clone https://github.com/dim0627/hugo_theme_robust.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bookshelfディレクトリへ戻った後、テーマと下書きモードを指定してビルトインサーバーを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ..
    
$ hugo server --theme=hugo_theme_robust --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで下記URLにアクセスすると、先ほど作った&amp;rdquo;good to great&amp;rdquo;という記事が表示されました。(テンプレートは日本人デザイナー作！)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-init.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-init.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-サンプル更新&#34;&gt;3.サンプル更新&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;次に記事を更新してみます。&lt;/p&gt;

&lt;p&gt;そのままbookshelfディレクトリでファイルを開きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim content/post/good-to-great.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;適当に書き込むと…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;+++
date = &amp;quot;2017-03-19T03:39:26+09:00&amp;quot;
title = &amp;quot;good to great&amp;quot;
draft = true
    
+++
    
ここに記事を書いていく。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画面に反映されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-edit.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-edit.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;記事を編集するとブラウザのリロードも自動でやってくれるので便利です。&lt;/p&gt;

&lt;p&gt;ChromeのDeveloper Toolsで見ると、自動リロードはWebSocketを使っているようですね。(オレンジの枠線)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-websocket.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/hugo_quickstart/hugo-websocket.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Webサイト・スピードアップ - gulp</title>
      <link>https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/</link>
      <pubDate>Sun, 26 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-02-26-speed_up_website_gulp/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2017年03月07日&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;フロントエンドの話なのでサーバー環境はあまり関係ないのですが、参考まで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;サーバー&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Nginx] 1.10.2
[Kitura] 1.1.2
[Swift] 3.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ローカル&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[Node.js] 7.6.0
[gulp] 3.9.1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;1-準備&#34;&gt;1.準備&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;仕事でやっているWebサイトのスピードアップを個人でもやってみたくて、適当なページを1つ作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jyear.net/cal/&#34; target=&#34;_blank&#34;&gt;シンプルカレンダー&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;そしてパフォーマンス改善の教科書に選んだのはこちらです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.codeproject.com/Articles/26376/Speed-Up-Your-Website-By-Example&#34; target=&#34;_blank&#34;&gt;Speed Up Your Website&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-現状&#34;&gt;2.現状&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apacheで運用しているWebアプリが他にあるため、下記のようなちょっと珍しい構成になっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Nginx(リバースプロキシとして使用) + ServerSide-Swift(Kitura)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;僕のネット環境(下り57Mbps/上り18Mbps)&lt;font color=&#34;green&#34;&gt;(※1)&lt;/font&gt;だとシンプルカレンダーのロードタイムが約2.5秒&lt;font color=&#34;green&#34;&gt;(※2)&lt;/font&gt;でそこまでストレスは感じませんが、DBを使ってないわりにこの数字なので改善の余地ありです。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(※1)&lt;/font&gt; 回線速度は&lt;a href=&#34;http://www.speedtest.net/&#34; target=&#34;_blank&#34;&gt;SPEEDTEST&lt;/a&gt;で計測。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(※2)&lt;/font&gt; Chrome Developer Tools で計測。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-ブラウザからのリクエスト削減&#34;&gt;3.ブラウザからのリクエスト削減&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Chrome Developer ToolsのNetworkタブで見るとCSS、JavaScript(以下JS)のダウンロードに時間がかかっているので、教科書の[1. Reduce number of HTTP requests]-[Combine files]から取り掛かってみました。&lt;/p&gt;

&lt;p&gt;HTMLから静的ファイル(CSS、JSなど)を複数ダウンロードする際、ブラウザが並列でリクエストできる数が決まっているため、なるべくそれを減らしましょうという内容です。&lt;/p&gt;

&lt;p&gt;複数の静的ファイルをまとめるためのツール&lt;font color=&#34;green&#34;&gt;(※3)&lt;/font&gt;を検討しましたが、一番簡単に実現できそうだったgulpを使いました。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(※3)&lt;/font&gt; webpack、gulp、Grunt&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;4-node-jsの準備&#34;&gt;4.Node.jsの準備&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Node.jsのバージョンを切り替えられるよう、nodebrew を使いたいと思います。(既にNode.jsをインストール済みの場合、読み飛ばしてもOKです)&lt;/p&gt;

&lt;p&gt;HomebrewでNode.jsをインストール済みの場合は一度アンインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew uninstall node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nodebrewをインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install nodebrew
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;nodebrewへのパスを通すため、.bashrcの末尾に下記を追記。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# これを追記
export PATH=$HOME/.nodebrew/current/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定を反映します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ source ~/.bashrc
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Node.jsインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nodebrew install-binary latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;エラーが出たので、&lt;a href=&#34;https://blog.yug1224.com/archives/5693a5e0fef2539c7d5b149d&#34; target=&#34;_blank&#34;&gt;このページ&lt;/a&gt;に従ってディレクトリを作成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir ~/.nodebrew
$ mkdir ~/.nodebrew/src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用するNode.jsのバージョンを指定。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ nodebrew ls
v7.6.0

$ nodebrew use v7

$ node -v
v7.6.0
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;5-gulpの準備&#34;&gt;5.gulpの準備&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;gulpをインストール。&lt;/p&gt;

&lt;p&gt;自分だけのローカル環境なのでグローバル(-g)を指定してインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install -g gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリ(プロジェクト)のルートディレクトリで下記を実行すると、package.jsonファイルが作成されます。(これにパッケージ情報が書き込まれる)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm init
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そのままgulpとgulpのプラグインをインストールし、&amp;rdquo;&amp;ndash;save-dev&amp;rdquo;を付けることでpackage.jsonに記録します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install --save-dev gulp
$ npm install --save-dev gulp-concat gulp-uglify gulp-minify-css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アプリのルートディレクトリに gulpfile.js というファイルを作成し、こちらの内容を記入します。(パスは自分の環境に読み替えて下さい)&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/db5caad7d75a4064ef98f140a39de5bc.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;続けて下記コマンドを打つと指定したディレクトリに結合・圧縮したCSS、JSファイルが出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ gulp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTMLからはそれらを読み込むよう修正します。(上記の例ではbundle.css、bundle.js)&lt;/p&gt;

&lt;p&gt;イメージはこんな感じです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_gulp/gulp_image.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;gulpイメージ&#34; alt=&#34;gulpイメージ&#34; src=&#34;https://sankame.github.io/assets/posts/img/speed_up_website_gulp/gulp_image.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ブラウザでJSエラー発生。&lt;/p&gt;

&lt;p&gt;修正後の画面をブラウザで確認したところ下記エラーが表示されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Bootstrap&#39;s JavaScript requires jQuery
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;どうやら上記の書き方だと、CSSやJSの読み込み順序が任意になり、BootstrapでjQueryが使えない状態になってるようです。&lt;/p&gt;

&lt;p&gt;もともとHTMLに書いてあったのと同じ順序でCSSとJSを指定するとエラーは出なくなりました。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/86e56663930ec4b8a2b0c187a7b66d61.js&#34;&gt;&lt;/script&gt;

&lt;p&gt;(IE9以下の指定で読み込んでいたJSもとりあえず含んでいます)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;6-バックエンドとの接続不良&#34;&gt;6.バックエンドとの接続不良&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;本番へアップすると、数回に一回、ブラウザ側でエラーが発生しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET https://jyear.net/simple-cal/js/dist/bundle.js net::ERR_CONTENT_LENGTH_MISMATCH
(index):47 GET https://jyear.net/simple-cal/css/dist/bundle.css net::ERR_CONTENT_LENGTH_MISMATCH
(index):2196 Uncaught ReferenceError: $ is not defined
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このエラーが起きるとNginxでは下記のログが出力されていました。(【】はマスク)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;upstream prematurely closed connection while reading upstream, client: 【IP】, server: jyear.net, request: &amp;quot;GET /simple-cal/css/dist/bundle.css HTTP/1.1&amp;quot;, upstream: &amp;quot;http://【ホスト名】/simple-cal/css/dist/bundle.css&amp;quot;, host: &amp;quot;jyear.net&amp;quot;, referrer: &amp;quot;https://jyear.net/cal/“
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;いろいろネットで調べたところ、バックエンドから接続が切られるとこのエラーがでるようです。&lt;/p&gt;

&lt;p&gt;Nginxのproxy_connect_timeoutや、Kituraにタイムアウト設定があるか調べたのですが、解決策が見つからなかったため、1つにしていたbundleファイルを分割することにしました。&lt;/p&gt;

&lt;p&gt;分割して1ファイル当たりのサイズを抑えることでエラーは出なくなりました。&lt;/p&gt;

&lt;p&gt;(そもそも1ファイル約200KBだったのでWebで扱うには大きかった…)&lt;/p&gt;

&lt;p&gt;最終的な gulpfile.js はこちらです。&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/4167aaa3bfdbc4cc46f3b6a926f0ed25.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;7-結果&#34;&gt;7.結果&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここまでやって前後の比較をしたところ、Chromeで下記の結果になりました。&lt;/p&gt;

&lt;table border=&#34;1&#34; cellspacing=&#34;0&#34;&gt;
&lt;tr bgcolor=&#34;#fff5ee&#34;&gt;&lt;th width=&#34;20%&#34;&gt;&lt;/th&gt;&lt;th&gt;Before&lt;/th&gt;&lt;th&gt;After&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Load&lt;br&gt;(5回の平均)&lt;/td&gt;&lt;td&gt;2.2秒&lt;/td&gt;&lt;td&gt;1.6秒&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;転送量&lt;/td&gt;&lt;td&gt;518KB&lt;/td&gt;&lt;td&gt;451KB&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;リクエスト数&lt;/td&gt;&lt;td&gt;28&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;また、他の計測ツールとしてGTmetrixを使おうとしたのですが、エラーになってしまったため、LighthouseというChrome Extensionを利用しました。&lt;/p&gt;

&lt;p&gt;Lighthouseによる計測結果の詳細はこちら。&lt;a href=&#34;https://sankame.github.io/assets/posts/html/speed_up_website_gulp/gulp_before.html&#34; target=&#34;_blank&#34;&gt;Before&lt;/a&gt;　&lt;a href=&#34;https://sankame.github.io/assets/posts/html/speed_up_website_gulp/gulp_after.html&#34; target=&#34;_blank&#34;&gt;After&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Page load performance&amp;rdquo;の改善でトータル・スコアも若干上がりました。(42→44)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>シェルで引数チェック</title>
      <link>https://sankame.github.io/blog/2017-01-08-sh_check_args/</link>
      <pubDate>Sun, 08 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-01-08-sh_check_args/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[GNU bash] 3.2.57
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-内容&#34;&gt;1. 内容&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;test.shの先頭で第一引数をチェックして、無い場合は処理を中断します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;test.sh&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [ &amp;quot;$1&amp;quot; = &amp;quot;&amp;quot; ]
then

    echo &amp;quot;引数を指定して下さい。&amp;quot;
    # 処理を中断。
    exit 1

fi

echo &amp;quot;任意の処理&amp;quot;
echo &amp;quot;引数は$1&amp;quot;
exit 0
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;実行結果&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ sh test.sh
引数を指定して下さい。

$ sh test.sh hoge
任意の処理
引数はhoge
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Swift3の大文字・小文字処理</title>
      <link>https://sankame.github.io/blog/2017-01-03-swift3_uppercase_lowercase/</link>
      <pubDate>Tue, 03 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-01-03-swift3_uppercase_lowercase/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2017年01月27日&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Swift] 3.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-大文字-小文字処理&#34;&gt;1. 大文字・小文字処理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Swift3から大文字・小文字の処理は下記のようになります。&lt;/p&gt;

&lt;p&gt;(明示的にするため入れていますが型宣言は省略可)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/f04ea8d3f243763248ab236c2a33fb69.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上記コードはIBM Swift Sandboxで動かせます。&lt;/p&gt;

&lt;p&gt;下記リンク先の真ん中にある三角ボタンをクリックして下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/586d095a159cb34b17238967&#34; target=&#34;_blank&#34;&gt;Swift3で大文字・小文字処理&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(ChromeまたはFirefox推奨)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-参考ページ&#34;&gt;2. 参考ページ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/reference/foundation/nsstring/1414769-caseinsensitivecompare&#34; target=&#34;_blank&#34;&gt;caseInsensitiveCompare&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/reference/foundation/nsstring/1417333-localizedcaseinsensitivecompare&#34; target=&#34;_blank&#34;&gt;localizedCaseInsensitiveCompare&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Swift3のforループ</title>
      <link>https://sankame.github.io/blog/2016-12-30-swift3_loop/</link>
      <pubDate>Fri, 30 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-12-30-swift3_loop/</guid>
      <description>

&lt;p&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span style=&#34;color:#d14; float:right;&#34;&gt;更新日：2017年02月09日&lt;/span&gt;&lt;/p&gt;

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Swift] 3.0.2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-ループ&#34;&gt;1. ループ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Swift3からループ処理は下記のようになります。&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/2f608da7dbbc9313462a1bb4cbc0c1d0.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;上記コードはIBM Swift Sandboxで実際に動かすことができます。&lt;/p&gt;

&lt;p&gt;下記リンク先の真ん中にある三角ボタンをクリックして下さい。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://swiftlang.ng.bluemix.net/#/repl/589b400e3514ef243889d092&#34; target=&#34;_blank&#34;&gt;Swift3でのforループ&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(ChromeまたはFirefox推奨)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ApacheのProxyPassでhtmlタグがそのまま表示される</title>
      <link>https://sankame.github.io/blog/2016-12-25-mod_proxy_text_plain/</link>
      <pubDate>Sun, 25 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-12-25-mod_proxy_text_plain/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[CentOS] 6.8 (64bit版カーネル)
[Apache] 2.2.15
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ApacheのProxyPassディレクティブ(mod_proxy)を指定して、バックエンドから受け取ったコンテンツを表示しようとするとhtmlタグがそのまま表示されてしまいます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apache設定ファイルの抜粋&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;NameVirtualHost *:80
        
# 省略
        
&amp;lt;VirtualHost *:80&amp;gt;
    ServerAdmin test@local
    ServerName test.local

    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/

    ErrorLog logs/test.local-error_log
    CustomLog logs/test.local-access_log combined
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ChromeのDeveloper Toolsなどで見ると、下記のようにHTTPレスポンスヘッダーで平文が指定されています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Content-Type text/plain; charset=UTF-8&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;デフォルトのMIMEタイプ指定を無効にすることで解消しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Apache設定ファイルの抜粋&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-apache&#34;&gt;NameVirtualHost *:80
        
# 省略
        
&amp;lt;VirtualHost *:80&amp;gt;
    ServerAdmin test@local
    ServerName test.local

    # ----- この行を追加 ----- 
    DefaultType None
    # ----- この行を追加 ----- 

    ProxyPreserveHost On
    ProxyPass / http://127.0.0.1:8080/
    ProxyPassReverse / http://127.0.0.1:8080/

    ErrorLog logs/test.local-error_log
    CustomLog logs/test.local-access_log combined
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-参考ページ&#34;&gt;3. 参考ページ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/5034131/mod-proxy-ajp-error-renders-html-as-text-plain-prompts-user-to-save-as&#34; target=&#34;_blank&#34;&gt;mod_proxy_ajp error: renders html as text/plain, prompts user to “save as…”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AppleWatchアプリ開発におけるWCSessionのメソッド使用方法</title>
      <link>https://sankame.github.io/blog/2016-11-21-wcsession_sendmessage_slow_in_swift3/</link>
      <pubDate>Mon, 21 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-11-21-wcsession_sendmessage_slow_in_swift3/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[OS] Mac OS X 10.11.6
[IDE] Xcode 8.1
[Swift] 3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WCSession#sendMessage()を使ってAppleWatchからiPhoneアプリへメッセージを送っても、30秒ほどしないと通知されない。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AppleWatch側&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@IBAction func tapButton() {

    let message = [ &amp;quot;fromChild&amp;quot;: &amp;quot;AppleWatchからのメッセージ&amp;quot; ]

    WCSession.default().sendMessage(
            message
            , replyHandler: { reply in }
            , errorHandler: { error in }
    )

}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iPhone側&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func session(_ session: WCSession, didReceiveMessage message: [String: Any], replyHandler: @escaping ([String: Any]) -&amp;gt; Void) {

    if let watchMessage = message[&amp;quot;fromChild&amp;quot;] as? String {
        print(watchMessage)
    }
    else{
        print(&amp;quot;error&amp;quot;)
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;replyHandlerを設定するなど、いろいろ情報はあったのですが、結局 sendMessage() を諦め、updateApplicationContext() を使うことにしました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;ただ updateApplicationContext() は状態が変わった際に通知するためのメソッドなので、二回目以降の値が変わらないとiPhone側のメソッドが呼び出されません。&lt;/p&gt;

&lt;p&gt;API仕様書には明記されていませんがそのような動きをしています。(「3. 参考ページ」参照)&lt;/p&gt;

&lt;p&gt;ですので、sendMessage() と同じように使いたい場合は、毎回変わる値をダミーとして設定すると実現できます。(多少強引ですが、下記例では時間を設定しています)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;AppleWatch側&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;@IBAction func tapButton() {

    let dateFormatter = DateFormatter()
    dateFormatter.locale = Locale(identifier: &amp;quot;ja_JP&amp;quot;)
    dateFormatter.timeStyle = .medium
    dateFormatter.dateStyle = .medium

    let item: Dictionary&amp;lt;String, String&amp;gt; = [
        &amp;quot;message&amp;quot;: &amp;quot;AppleWatchからのメッセージ&amp;quot;
        , &amp;quot;date&amp;quot;: dateFormatter.string(from: NSDate() as Date)]

    let message = [ &amp;quot;fromChild&amp;quot;: item ]

    do{
        try WCSession.default().updateApplicationContext(message)
    }catch{
        print(error)
    }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iPhone側&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;func session(_ session: WCSession, didReceiveApplicationContext applicationContext: [String : Any]) {

    DispatchQueue.main.async { () -&amp;gt; Void in
        if let watchMessage = applicationContext[&amp;quot;fromChild&amp;quot;] as? Dictionary&amp;lt;String, String&amp;gt; {
            self.label.text = watchMessage[&amp;quot;message&amp;quot;]! as String
        }
    }
    return

}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-参考ページ&#34;&gt;3. 参考ページ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.apple.com/reference/watchconnectivity/wcsession&#34; target=&#34;_blank&#34;&gt;API Reference WCSession&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Type &#39;ViewController&#39; does not conform to protocol &#39;WCSessionDelegate&#39;</title>
      <link>https://sankame.github.io/blog/2016-11-15-wcsessiondelegate_in_swift3/</link>
      <pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-11-15-wcsessiondelegate_in_swift3/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[OS] Mac OS X 10.11.6
[IDE] Xcode 8.1
[Swift] 3.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;iPhone &amp;amp; AppleWatchアプリを作成中にSwiftを2.2から3へバージョンアップしたところ、iPhone側で下記のエラーが出るようになりました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Type &#39;ViewController&#39; does not conform to protocol &#39;WCSessionDelegate&#39;&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-解決&#34;&gt;2. 解決&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ViewControllerに下記メソッドを追加するとエラーが消えました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-swift&#34;&gt;public func session(_ session: WCSession, activationDidCompleteWith activationState: WCSessionActivationState, error: Error?) {
}

func sessionDidBecomeInactive(_ session: WCSession) {
}

func sessionDidDeactivate(_ session: WCSession) {
    session.activate()
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;下記の仕様書にもこれらのメソッドは必須と書かれています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.apple.com/reference/watchconnectivity/wcsessiondelegate&#34; target=&#34;_blank&#34;&gt;[API Reference] WCSessionDelegate&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-参考ページ&#34;&gt;3. 参考ページ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://forums.developer.apple.com/thread/63452&#34; target=&#34;_blank&#34;&gt;Migrating app from Swift 2.2 to 3.0 with WCSessionDelegate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Eclipseでタブをスペースに置換</title>
      <link>https://sankame.github.io/blog/2016-10-08-convert_tabs_to_spaces_on_eclipse/</link>
      <pubDate>Sat, 08 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-10-08-convert_tabs_to_spaces_on_eclipse/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[OS] Mac OS X 10.11.4
[Eclipse] Mars.2 Release (4.5.2)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;久々にEclipseをさわっていたら、タブをスペースに変換する設定に手間取ったのでメモ。&lt;/p&gt;

&lt;p&gt;(Windowsでもメニュー名を読み替えて頂くと使えます)&lt;/p&gt;

&lt;p&gt;プログラミングで使うインデントに関して、僕はタブ派ですが、職場や&lt;a href=&#34;http://www.gizmodo.jp/2016/09/tab-vs-space.html&#34; target=&#34;_blank&#34;&gt;最近の流れ&lt;/a&gt;からしてもスペースを使わざるを得ないでしょう。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-解決&#34;&gt;2. 解決&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eclipseに標準でついている機能が動かなかったので、AnyEditToolsというプラグインを入れました。&lt;/p&gt;

&lt;p&gt;メニューの [ヘルプ]-[Install new software] をクリック。&lt;/p&gt;

&lt;p&gt;[作業対象]に下記を入力。(anyぐらいまで打つと補完されます)&lt;/p&gt;

&lt;p&gt;&lt;code&gt;anyedit - http://andrei.gmxhome.de/eclipse/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;とりあえず最新バージョンのAnyEditToolsにチェック。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/convert_tabs_to_spaces_on_eclipse/install.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;インストール&#34; alt=&#34;インストール&#34; src=&#34;https://sankame.github.io/assets/posts/img/convert_tabs_to_spaces_on_eclipse/install.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[次へ]をクリック。&lt;/p&gt;

&lt;p&gt;途中ライセンスへの同意やセキュリティ警告が出ますが、最後までいくと再起動を求められるのでそのままOKをクリックします。&lt;/p&gt;

&lt;p&gt;起動後、Eclipse上で任意のファイルにタブを入力し、保存したタイミングでスペースに置換されます。&lt;/p&gt;

&lt;p&gt;変わらない場合や細かい設定をしたい場合は下記の設定画面から行って下さい。&lt;/p&gt;

&lt;p&gt;メニューの [Eclipse]-[環境設定] をクリック。&lt;/p&gt;

&lt;p&gt;[一般]-[エディタ]-[AnyEdit Tools]&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/convert_tabs_to_spaces_on_eclipse/settings.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;設定&#34; alt=&#34;設定&#34; src=&#34;https://sankame.github.io/assets/posts/img/convert_tabs_to_spaces_on_eclipse/settings.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Eclipseでマークダウンを書く人は[Remove trailing whitespace]のチェックを外しておいたほうがいいかもしれません。&lt;/p&gt;

&lt;p&gt;ファイルフィルタ(上記の[Add Filter])で拡張子mdを除外したり、プロジェクトごとに設定&lt;font color=&#34;green&#34;&gt;(*1)&lt;/font&gt;を変えることもできます。&lt;/p&gt;

&lt;p&gt;&lt;font color=&#34;green&#34;&gt;(*1)プロジェクトごとの設定&lt;/font&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;プロジェクト・エクスプローラーの該当プロジェクトを右クリック。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[プロパティ]-[AnyEdit Tools] をクリック。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;[Enable project specific settings]にチェックを入れる。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>型 UrlValidator は使用すべきではありません</title>
      <link>https://sankame.github.io/blog/2016-10-06-urlvalidator-is-deprecated/</link>
      <pubDate>Thu, 06 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-10-06-urlvalidator-is-deprecated/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[OS] Mac OS X 10.11.4
[Java] 1.8.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;久々にJavaで実装する機会がありました。標準ライブラリのjava.net.URLクラスは、URLとして解釈できない文字列を渡すと例外が投げられるので扱いずらいですね。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;// IllegalArgumentException が発生。
url = URL.create(&amp;quot;不正なURL&amp;quot;);

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うーん、最初、RFCを見て「URLとして許可されている文字列だけ渡す」という処理を入れようか迷いました。&lt;/p&gt;

&lt;p&gt;が、一から組むのも骨が折れるなあ～と思って、困った時の&lt;a href=&#34;https://commons.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache Commons&lt;/a&gt;を探してみたら、しめしめ&lt;a href=&#34;https://commons.apache.org/proper/commons-validator/download_validator.cgi&#34; target=&#34;_blank&#34;&gt;Apache Commons Validator&lt;/a&gt;にUrlValidatorクラスというのがありました。&lt;/p&gt;

&lt;p&gt;早速このクラスをimportして使おうと思ったら、下記の警告が出てしまいました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;型 UrlValidator は使用すべきではありません&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-解決&#34;&gt;2. 解決&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;調べてみたところ、①のパッケージは非推奨で②に変えたら警告も消えました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;font color=&#34;red&#34;&gt;①こっちは非推奨&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;import org.apache.commons.validator.UrlValidator;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;font color=&#34;green&#34;&gt;②これを使って！&lt;/font&gt;&lt;/p&gt;

&lt;p&gt;import org.apache.commons.validator.routines.UrlValidator;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-参考&#34;&gt;3. 参考&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/14274919/the-type-urlvalidator-is-deprecated&#34; target=&#34;_blank&#34;&gt;The type UrlValidator is deprecated&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>.gitignoreをaddできない</title>
      <link>https://sankame.github.io/blog/2016-08-21-how-to-add-gitignore/</link>
      <pubDate>Sun, 21 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-08-21-how-to-add-gitignore/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[git] 2.7.4 (Apple Git-66)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-問題&#34;&gt;1. 問題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;アプリのルートディレクトリに.gitignoreをおいたのですが、git status で見ても追加対象として出てきません。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-解決&#34;&gt;2. 解決&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最初(A)のように書いていたのですが、これだとダメで、[除外設定]→[例外] の順に書かないといけないようです。&lt;/p&gt;

&lt;p&gt;(「. が先頭にあるファイルは除外してね」→「但し .gitignore は例外だよ」)&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;(A) 修正前&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/5918ea08bcdc09322907a34434277f08.js&#34;&gt;&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;(B) 修正後&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&#34;https://gist.github.com/Sankame/dc68236f9088ca8964f43009cae285cd.js&#34;&gt;&lt;/script&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>AppleWatchアプリ開発におけるiOSアプリのデバッグ方法</title>
      <link>https://sankame.github.io/blog/2016-08-07-debug-ios-app-with-watchkit/</link>
      <pubDate>Sun, 07 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-08-07-debug-ios-app-with-watchkit/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[OS] Mac OS X 10.11.4
[IDE] Xcode 7.3
[Swift] 2.1.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-課題&#34;&gt;1. 課題&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;AppleWatchのアプリ開発で「WatchKit App」を起動すると、iOSアプリのブレークポイントで停止しない。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-対策&#34;&gt;2. 対策&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;XcodeのデバッガーにiOSアプリを手動で追加する必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;「WatchKit App」を選択してアプリ実行。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/1.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/1.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;iOSアプリのシュミレーターで、iOSアプリを起動。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Xcodeに戻って [Debug]-[Attach to Process] からiOSアプリを選択。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/2.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/2.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;左のパネルで[Debug navigator]を選択し、下記①②でiOSアプリが選択されていることを確認。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/3.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;50%&#34; height=&#34;50%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;https://sankame.github.io/assets/posts/img/debug-ios-app-with-watchkit/3.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>