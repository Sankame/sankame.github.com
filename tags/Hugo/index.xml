<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on プログラマー備忘録</title>
    <link>/tags/hugo/index.xml</link>
    <description>Recent content in Hugo on プログラマー備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <atom:link href="/tags/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugoクイックスタート</title>
      <link>/blog/2017-03-19-hugo_quickstart/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-03-19-hugo_quickstart/</guid>
      <description>

&lt;h3 id=&#34;0-環境&#34;&gt;0. 環境&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;[Mac] 10.11.6
[Hugo] 0.19
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;1-インストール&#34;&gt;1.インストール&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ここ数年、ブログウェアはjekyllを使ってましたが、下記の点が不便だったので、評判の良いHugoを試してみました。まずはサンプルを動かすところまで。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;初期構築やバージョンアップが大変だったので、他のPCに環境を作る気になれない。(今ならDockerという手もありますが…)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事の生成に時間がかかるようになってきた。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;記事の更新後、2～3回リロードしないとブラウザに反映されない。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/tutorials/installing-on-mac/&#34; target=&#34;_blank&#34;&gt;インストール・マニュアル&lt;/a&gt;に従って進めました。&lt;/p&gt;

&lt;p&gt;僕の場合、Homebrewは既に入っていたのでStep2からやりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew update
    
$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「インストール後にバージョンを調べてね」と書いてあるので念のためチェックです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ls -l $( which hugo )
lrwxr-xr-x  1 mx  admin  28  3 19 03:08 /usr/local/bin/hugo -&amp;gt; ../Cellar/hugo/0.19/bin/hugo
    
$ hugo version
Hugo Static Site Generator v0.19 darwin/amd64 BuildDate: 2017-02-27T19:21:29+09:00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2行とも0.19なので問題なさそうです。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-サンプル作成&#34;&gt;2.サンプル作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34; target=&#34;_blank&#34;&gt;こちらのページ&lt;/a&gt;に沿ってサンプルを作成しました。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;適当なディレクトリで下記を実行します。(僕の場合 /app/hugo-test/ なので読み替えて下さい)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd /app/hugo-test/
    
$ hugo new site bookshelf
    
$ cd bookshelf/
    
$ tree -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目的別のディレクトリが作成されていると思います。&lt;/p&gt;

&lt;p&gt;treeコマンドが使えない場合、下記でインストールしましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install tree
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サンプル記事を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ hugo new post/good-to-great.md
/app/hugo-test/bookshelf/content/post/good-to-great.md created
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さらにGitHubから適当なテーマを取得。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd themes/

$ git clone https://github.com/dim0627/hugo_theme_robust.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bookshelfディレクトリへ戻った後、テーマと下書きモードを指定してビルトインサーバーを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd ..
    
$ hugo server --theme=hugo_theme_robust --buildDrafts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ブラウザで下記URLにアクセスすると、先ほど作った&amp;rdquo;good to great&amp;rdquo;という記事が表示されました。(テンプレートは日本人デザイナー作！)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/&#34; target=&#34;_blank&#34;&gt;&lt;a href=&#34;http://localhost:1313/&#34;&gt;http://localhost:1313/&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/assets/posts/img/hugo_quickstart/hugo-init.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;/assets/posts/img/hugo_quickstart/hugo-init.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-サンプル更新&#34;&gt;3.サンプル更新&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;次に記事を更新してみます。&lt;/p&gt;

&lt;p&gt;そのままbookshelfディレクトリでファイルを開きます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ vim content/post/good-to-great.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;適当に書き込むと…&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;+++
date = &amp;quot;2017-03-19T03:39:26+09:00&amp;quot;
title = &amp;quot;good to great&amp;quot;
draft = true
    
+++
    
ここに記事を書いていく。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;画面に反映されました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/assets/posts/img/hugo_quickstart/hugo-edit.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;/assets/posts/img/hugo_quickstart/hugo-edit.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;記事を編集するとブラウザのリロードも自動でやってくれるので便利です。&lt;/p&gt;

&lt;p&gt;ChromeのDeveloper Toolsで見ると、自動リロードはWebSocketを使っているようですね。(オレンジの枠線)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/assets/posts/img/hugo_quickstart/hugo-websocket.jpg&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;100%&#34; height=&#34;100%&#34; title=&#34;xxx&#34; alt=&#34;xxx&#34; src=&#34;/assets/posts/img/hugo_quickstart/hugo-websocket.jpg&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>