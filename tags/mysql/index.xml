<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on プログラマー備忘録</title>
    <link>https://sankame.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on プログラマー備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Mon, 20 Mar 2023 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sankame.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CentOS7にMySQL5.1.7インストール</title>
      <link>https://sankame.github.io/blog/2023-03-20-how_to_install_mysql517_in_centos7/</link>
      <pubDate>Mon, 20 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2023-03-20-how_to_install_mysql517_in_centos7/</guid>
      <description> 0. 環境 [OS] CentOS7 (x86_64)
1. 手順  元々入ってるMariaDBは競合を起こすので削除。
# yum remove mariadb-libs # rm -rf /var/lib/mysql/  インストール(サーバー、クライアントの順)
# yum localinstall http://dev.mysql.com/get/MySQL-server-community-5.1.73-1.rhel5.x86_64.rpm # yum localinstall http://dev.mysql.com/get/MySQL-client-community-5.1.73-1.rhel5.x86_64.rpm # mysqld --version mysqld Ver 5.1.73-community for unknown-linux-gnu on x86_64 (MySQL Community Server (GPL))  他のバージョンはここで調べて、http://dev.mysql.com/get/ の後につなげてダウンロードして下さい。
  </description>
    </item>
    
    <item>
      <title>MySQLでSlowQueryLogを有効にする</title>
      <link>https://sankame.github.io/blog/2021-09-11-mysql_setting_slow_query/</link>
      <pubDate>Sat, 11 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2021-09-11-mysql_setting_slow_query/</guid>
      <description>0. 環境 [OS] CentOS 6.10
[MySQL] 5.1
1. 前提  MySQLシステム変数は、SESSIONとGLOBALがあるので注意。
 有効範囲はそれぞれ「SESSIONは接続ごと」「GLOBALはMySQL起動中」というふうに異なります。
 GLOBALスコープで設定した値は、MySQL再起動で消失します。(これを防ぎたい場合、mysql.cnfに直接記載)
 MySQL8からは、SET PERSIST .. とすることで消失を防げる。    2. 接続  MySQLに接続。mysql -u root -p  3. コマンド (SESSIONスコープ)  下記は、SHOW SESSION VARIABLES ..と書いたのと同義。
 現在の値
-- SlowQueryを出力するか？ SHOW VARIABLES LIKE &#39;slow_query_log&#39;; -- 何秒を超えたらSlowQueryとして出力するか？ SHOW VARIABLES LIKE &#39;long_query_time&#39;; -- SlowQuery出力先のファイル名 SHOW VARIABLES LIKE &#39;slow_query_log_file&#39;;  更新
SET long_query_time = 3;  (注)slow_query_logとslow_query_log_fileはGLOBALスコープでのみ変更可能。
  4.</description>
    </item>
    
    <item>
      <title>MySQLでquery_cache系パラメータを設定すると起動エラー</title>
      <link>https://sankame.github.io/blog/2020-04-01-mysql8_not_support_querycache/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2020-04-01-mysql8_not_support_querycache/</guid>
      <description>0. 環境 [MySQL] 8.0.17
1. 経緯  GCP無料枠のメモリ約500MBという貧弱な環境でWordPressを運用してます。
少しでもパフォーマンス改善したく、MySQLのクエリキャッシュを設定しました。(下記要点のみ記載)
# vim /etc/my.cnf.d/mysql-server.cnf : : [mysqld] query_cache_type=1 query_cache_limit=1M query_cache_size=20M  MySQLを再起動。
# mysql -u hoge -phoge -e&amp;quot;SET GLOBAL innodb_fast_shutdown = 1&amp;quot; # service mysqld stop # service mysqld start  起動しなくなりました…
ログを見ると下記エラーが出てました。(要点のみ記載)
# tail -F /var/log/mysql/mysqld.log : : [Server] unknown variable &#39;query_cache_type=1&#39;.   2. 対応  ネットで情報を漁ったところ、MySQL8からはクエリキャッシュが使えなくなったようです。
MySQL 8.0: Retiring Support for the Query Cache
代わりにProxySQLというのが紹介されてましたが、ミドルウェアを追加するとメンテするポイントも増えるので今回は見送りました。
一旦は、WordPressのプラグイン(WP Super Cache)とphp-fpmのチューニングで、DBより手前で何とかする方向で進めます。</description>
    </item>
    
    <item>
      <title>MySQLのdatetimeとtimestampの値比較</title>
      <link>https://sankame.github.io/blog/2020-03-20-mysql_compare_datetime_timestamp/</link>
      <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2020-03-20-mysql_compare_datetime_timestamp/</guid>
      <description> MySQLで日付系のカラムを比較するときにちょっと手間取ったのでメモ。
0. 環境 [MySQL] 5.7.14
1. 前提  2つのテーブルに型が異なるカラムがあったとします。()内は小数秒の桁数の精度を表してます。
 テーブルAの定義抜粋
CreateDate datetime(3) # 小数秒あり  テーブルBの定義抜粋
created_at timestamp # 小数秒なし    2. 手順  この2カラムが一致していることをWHERE句で指定するには、日付フォーマットを揃えるとうまくいきました。
 SQL文の抜粋
AND IFNULL(DATE_FORMAT(a.CreateDate, &#39;%Y%m%d%H%i%S&#39;), &#39;&#39;) = IFNULL(DATE_FORMAT(b.created_at, &#39;%Y%m%d%H%i%S&#39;), &#39;&#39;)  今回は秒まで比較できれば十分でしたが、もし小数秒以下も含める場合は、下記を参照してフォーマットを追加して下さい。
 MySQLにおける日付変換    3. 日付型の違い  そもそもdatetimeとtimestampの使い分けは？というのはこの記事によくまとまっていました。
 MySQL: DATETIME vs TIMESTAMP
 ざっくり言うと、こんな感じですね。
 [datetime] 格納できる値の範囲が広いが、その分容量が必要。 [timestamp] インデックス、UTC変換、タイムゾーン対応など、機能性を求めるならこっち。    4. 参考  日付と時間型の概要  </description>
    </item>
    
    <item>
      <title>MonitでApacheとMySQLを復旧</title>
      <link>https://sankame.github.io/blog/2018-05-11-monit_for_apache_mysql/</link>
      <pubDate>Fri, 11 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2018-05-11-monit_for_apache_mysql/</guid>
      <description>MonitでApacheとMySQLを復旧させる最低限の設定です。
(文中のドメイン名やメールアドレスは読み替えて下さい)
0. 環境 [CentOS] 6.4 (64bit版カーネル) [Monit] 5.25.1 [Apache] 2.2.15 [MySQL] 5.1.73  1. セットアップ  インストール
# yum install monit  自動起動を設定
# chkconfig monit on   2. 設定 2-1. Apacheの監視設定  httpd.conf を開いて、
# vim /etc/monit.d/httpd.conf  下記を記載。
check process httpd with pidfile /var/run/httpd/httpd.pid start program = &amp;quot;/etc/init.d/httpd start&amp;quot; stop program = &amp;quot;/etc/init.d/httpd stop&amp;quot; if 5 restarts within 5 cycles then timeout if failed host example.</description>
    </item>
    
    <item>
      <title>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (38)</title>
      <link>https://sankame.github.io/blog/2017-11-20-fail_to_connect_mysql/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2017-11-20-fail_to_connect_mysql/</guid>
      <description> 0. 環境 [Mac] 10.11.6 [MySQL] 5.7.20  1. 問題  MacにMySQLをインストール後、接続しようとするとエラーが出ました。
$ brew install mysql $ mysql -uroot ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (38)   2. 対策  ネットの情報をヒントに、エラーが出ているファイルの所有者を変えたら直りました。(ログインユーザー名は読み替えて下さい)
$ ll /tmp/mysql.sock -rw-r--r-- 1 root wheel 0 11 19 23:46 /tmp/mysql.sock $ sudo chown [ログインユーザー名] /tmp/mysql.sock  念のためリスタート。
$ brew services restart mysql  接続できました。
$ mysql -uroot   </description>
    </item>
    
    <item>
      <title>MySQLコマンド メモ</title>
      <link>https://sankame.github.io/blog/2013-08-26-mysql_command/</link>
      <pubDate>Mon, 26 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2013-08-26-mysql_command/</guid>
      <description> MySQLコマンド メモ WebサーバとDBサーバが1台のマシンにある場合によく行う操作。 # そのマシンのMySQLサーバにrootで接続 # (パスワードを聞かれるので入力してEnter) # mysql -h 127.0.0.1 -u root -p mysql&amp;gt; -- UTF8でDBを作成し、接続ユーザを作成 (先頭がtestの文字は読み替えて下さい) mysql&amp;gt; create database testdb default character set utf8; mysql&amp;gt; grant all on testdb.* to &#39;testuser&#39;@&#39;localhost&#39; identified by &#39;testpassword&#39;; mysql&amp;gt; flush privileges; mysql&amp;gt; -- 別マシンからDBへ接続する必要がある場合は、以下のように別ユーザを作成 mysql&amp;gt; -- (192.168.0.1の部分を別マシンのIPに読み替える) mysql&amp;gt; grant all on testdb.* to testuser@192.168.0.1 identified by &#39;testpassword&#39;; mysql&amp;gt; -- 作成したDBに切り替え、テーブルを作成 mysql&amp;gt; use testdb; mysql&amp;gt; DROP TABLE IF EXISTS `users`; mysql&amp;gt; CREATE TABLE `users` ( mysql&amp;gt; `id` bigint unsigned NOT NULL AUTO_INCREMENT PRIMARY KEY, mysql&amp;gt; `username` varchar(32) NOT NULL mysql&amp;gt; ) ENGINE=InnoDB;  </description>
    </item>
    
  </channel>
</rss>