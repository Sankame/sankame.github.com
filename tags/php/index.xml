<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PHP on プログラマー備忘録</title>
    <link>https://sankame.github.io/tags/php/</link>
    <description>Recent content in PHP on プログラマー備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 05 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sankame.github.io/tags/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>品質管理とUnitTest(Laravel&#43;PHPUnit&#43;Mockeryによるサンプルコード付き)</title>
      <link>https://sankame.github.io/blog/2020-05-05-laravel_phpunit_mockery/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2020-05-05-laravel_phpunit_mockery/</guid>
      <description>環境 [OS] Debian 10
[PHP] 7.3.13
[Laravel] 7.6.2
[PHPUnit] 8.5.3
[Mockery] 1.3.1
はじめに ソフトウェアやアプリケーション開発にとって品質管理は切っても切り離せない存在です。 日本の従来の品質管理は散布図やPB曲線などを用いて定量化を重視してきました。
しかし、それらは品質を数値化し分析することに寄りすぎていると感じるのは僕だけでしょうか？ 品質管理の本来の目的は「品質を上げること」にあるはずです。
一言で品質と言っても様々ですが、「品質 = 要求仕様に則った実装」と定義すると、品質向上のための必要十分な施策はUnitTestによるホワイトボックステストが一番の近道だと考えています。 実際、ネットの情報を見ても、Googleなどのテック企業はUnitTestを中心に据えているように見えます。 その上で、報告などの目的でどうしても品質を定量化したいのであれば、UnitTestのカバレッジ計測ツールを使ったら良いのではないでしょうか。
1. 方針 下記の方針でユニットテストを書いていきますが、自分のプロジェクトと合わない部分は変えて下さい。
 1-1. 後々CIで動かすことも考慮し、DB接続はモックで代替する。 1-2. フレームワークを含めず実装した箇所だけのテストコードを書く。 1-3. プロダクションコードの全ロジックを通すテストコードを書く。(「3. テスト記載方法」で後述) 1-4. 上記1-2の範囲でツールを用いてカバレッジを計測し、なるべく100%に近づける。(一般的にツールは評価が甘めのため) 1-5. テストコードの構成はフレームワークやデファクトスタンダードに合わせる。  2. 設定 2-1. PHPUnit  LaravelにはPHPUnitが最初から入ってるので、アプリのルートで下記コマンドを実行するとサンプルのテストコードが実行されます。
composer exec -v phpunit  アプリルートにあるtestsディレクトリにテストコードを格納していきます。同ディレクトリ内はさらにFeatureとUnitに分かれてます。
tests |-- CreatesApplication.php |-- Feature | `-- ExampleTest.php |-- TestCase.php `-- Unit `-- ExampleTest.php   Laravelの方針に合わせて、下記の区分けでテストを書いていきます。
 Feature</description>
    </item>
    
    <item>
      <title>CentOS8にバージョン指定でphpインストール</title>
      <link>https://sankame.github.io/blog/2019-10-19-install_php_in_centos8/</link>
      <pubDate>Sat, 19 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2019-10-19-install_php_in_centos8/</guid>
      <description> CentOS8にphpを入れるときのコマンドが分からなかったので要点だけメモ。
0. 環境 [OS] CentOS8 (64bit)
[PHP] 7.4
1. 手順  デフォルトのパッケージにはphp7.2までしか含まれていないので、remiリポジトリを足しました。
# dnf -y install https://rpms.remirepo.net/enterprise/remi-release-8.rpm  下記コマンドでインストール可能なphpバージョンを調べます。
# dnf module list php  &amp;ldquo;Stream&amp;rdquo;という欄に表示された名前を指定してインストールします。
 下記は7.4を指定してますが、2019/10/19時点の安定版は7.3なので、本番環境の場合は注意して下さい。
# dnf module install php:remi-7.4   パッケージの操作方法については、下記に詳細がまとまっています。
  2. 参考記事  How to install php on RHEL 8 / CentOS 8 Linux  </description>
    </item>
    
    <item>
      <title>composer updateでUndefined indexエラー</title>
      <link>https://sankame.github.io/blog/2016-06-25-composer_error_undefined_index/</link>
      <pubDate>Sat, 25 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-06-25-composer_error_undefined_index/</guid>
      <description> 0. 環境 [Laravel] 5.1  1. 問題  composer update を実行すると下記エラーが発生しました。
Writing lock file Generating autoload files &amp;gt; php artisan clear-compiled [ErrorException] Undefined index: HTTP_HOST Script php artisan clear-compiled handling the post-update-cmd event returned with error code 1   2. 解決策  HTTP_HOST でソースをgrepし、 /app/Http/routes.php 内の下記箇所を修正しました。
(修正前)
$_SERVER[&#39;HTTP_HOST&#39;]  (修正後)
Request::server(&#39;HTTP_HOST&#39;)   3. 参考  Composer returning mysterious error  </description>
    </item>
    
    <item>
      <title>トグル処理を楽に実装 (ビット演算)</title>
      <link>https://sankame.github.io/blog/2016-05-27-bitwise_operator_toggle/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-05-27-bitwise_operator_toggle/</guid>
      <description> 0. 環境 [CentOS] 6.4 (64bit版カーネル) [PHP] 5.4.17  1. XORでトグル処理  押すたびにON/OFFが切り替わるようなトグル処理を実装する場合はXORが便利です。
 6行目、11行目 : 「XOR 1」するとビットが反転する性質を利用します。(下記)
XOR
入力①0011 入力②0101 出力0110   </description>
    </item>
    
    <item>
      <title>状態管理を楽に実装 (ビット演算)</title>
      <link>https://sankame.github.io/blog/2016-05-27-bitwise_operator_status_control/</link>
      <pubDate>Fri, 27 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2016-05-27-bitwise_operator_status_control/</guid>
      <description> 0. 環境 [CentOS] 6.4 (64bit版カーネル) [PHP] 5.4.17  1. ORとANDで状態管理  複数の状態や権限をまとめて管理したい場合、2進数が便利です。
 2-5行目 : 2進数の定数(10進数表記)を用意します。
7行目 : ORでプログラミング言語を足していきます。
Aさんが使える言語の位にビットが立つイメージです。(下記)
 0001 (PHP) 0010 (Ruby) OR) 1000 (Perl) ---------- 1011 (Aさんが使えるプログラミング言語)  11行目以降 : Aさんが使えるプログラミング言語は何か、ANDで問い合わせます。
右端の位にビットが立っていれば結果がtrueになり、PHPが使えることが分かります。(下記)
 1011 (Aさんが使えるプログラミング言語) AND) 0001 (PHP) ---------- 0001 (PHPが使える)   </description>
    </item>
    
    <item>
      <title>プログラミング問題A</title>
      <link>https://sankame.github.io/blog/2015-12-31-programming_practice_a/</link>
      <pubDate>Thu, 31 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2015-12-31-programming_practice_a/</guid>
      <description> 環境 [CentOS] 5.6 (32bit版カーネル) [PHP] 5.4.17  問題A-1  10進数の任意の値をn進数に変換する関数を作成して下さい。(nは1～16の正の整数)
 サンプルはPHP。
  サンプルA-1  実行方法
$ php changeDecimalToBaseN.php  ソース
  </description>
    </item>
    
    <item>
      <title>【Laravel】integerメソッドの引数</title>
      <link>https://sankame.github.io/blog/2015-05-27-laravel_migration_integer_args/</link>
      <pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2015-05-27-laravel_migration_integer_args/</guid>
      <description> 0.環境 [PHP] 5.4.17 [Laravel] 4.1.30  1.内容  Fluentテーブルビルダーのintegerメソッドの引数について、意外と探すのに手間取ったのでメモ。
 integerメソッド抜粋   /** * @param $column テーブルのカラム名 * @param $autoIncrement 自動採番するかどうか * @param $unsigned 0以上の正の整数とするか */ public function integer($column, $autoIncrement = false, $unsigned = false)   ※参考にしたページ  Laravel Migration incorrect table definition  </description>
    </item>
    
    <item>
      <title>【Laravel】全てのビューに値を渡す</title>
      <link>https://sankame.github.io/blog/2014-07-21-laravel_passing_data_from_basecontroller/</link>
      <pubDate>Mon, 21 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-07-21-laravel_passing_data_from_basecontroller/</guid>
      <description> 0.環境 [CentOS] 5.6 (32bit版カーネル) [Apache] 2.2.3 [PHP] 5.4.1 [Laravel] 4.1.23  1.課題  全ビュー(Bladeテンプレート)で使う値をBaseControllerから渡したい。  2.対策  Laravelの作法としてあっているか不明ですが、一旦これで値は渡せました。
下記例では、設定ファイルの基底URL(app.php内のurl変数)をビューに渡しています。
 ①　app/config/local/app.php
(本番環境の場合、app/config/app.php に定義して下さい)
 ②　app/controllers/BaseController.php
getBaseUrl() メソッドを定義し、基底URLを返します。
(staticでないとビューで実行できない)
 各コントローラは②を継承します。(コード抜粋)
class EachController extends BaseController {  ③　app/views/layout.blade.php (コード抜粋)
全てのビューで共通に使っているビューで、BaseControllerから値を取得します。
   </description>
    </item>
    
    <item>
      <title>【Laravel】AjaxでPOSTできない</title>
      <link>https://sankame.github.io/blog/2014-07-15-laravel_trailing_slash_redirect/</link>
      <pubDate>Tue, 15 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-07-15-laravel_trailing_slash_redirect/</guid>
      <description>0.環境 [CentOS] 5.6 (32bit版カーネル) [Apache] 2.2.3 [PHP] 5.4.1 [Laravel] 4.1.23  1.問題  PHPのLaravelフレームワークを使っていたら、AjaxでPOSTした値がサーバ側で取得できずにはまりました。
①から②へ test という名前で hoge という値を送信します。
 ① Javascript側
 ② PHP側
 ログ出力結果を見ると、下記のようにPOST値が取得できていません。
[2014-07-16 12:09:36] local.DEBUG: [] []    2.原因  Firefox の &amp;ldquo;Live HTTP headers&amp;rdquo; アドオンでURLの遷移を見たところ、下記のようにリダイレクトしていることがわかりました。(違いは末尾のスラッシュ)
http://local.vm/test/
↓↓↓
http://local.vm/test
 ソースを grep したところ、.htaccessでリダイレクトしていました。
 ■ ソース
app-root/public/.htaccess
 ■ 記述
# Redirect Trailing Slashes... RewriteRule ^(.*)/$ /$1 [L,R=301]    3.対策  Laravel は trailing slash 非推奨なのか？ とにかく下記のように修正。</description>
    </item>
    
    <item>
      <title>Revive Ad Server インストール (旧OpenX)</title>
      <link>https://sankame.github.io/blog/2014-05-04-revive_adserver_install/</link>
      <pubDate>Sun, 04 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-05-04-revive_adserver_install/</guid>
      <description>0.環境 [CentOS] 5.6 (32bit版カーネル) [Apache] 2.2.3 [PHP] 5.4.17 [Revive AdServer] 3.0.4  1.インストール  1-0.ダウンロード
適当なディレクトリにソースをダウンロードし、Apache公開ディレクトリへ移動。
(公開ディレクトリは自分の環境に読み替えて下さい)
# wget http://download.revive-adserver.com/revive-adserver-3.0.4.tar.gz # tar xzf revive-adserver-3.0.4.tar.gz # mv revive-adserver-3.0.4 revive-adserver # mv revive-adserver /app/.  1-1.インストール開始
ブラウザから、上記インストール先URLへアクセス。
(例) http://localhost/revive-adserver
ウィザードに従ってインストールを進めます。

&amp;ldquo;I Agree &amp;gt;&amp;gt;&amp;ldquo;ボタンを押すと、&amp;rdquo;File Permissions - 7 errors&amp;rdquo; というエラーが表示されました。
画面に表示されたコマンドをそのままコンソールで実行。
# chmod -R a+w /app/revive-adserver/var # chmod -R a+w /app/revive-adserver/var/cache # chmod -R a+w /app/revive-adserver/var/plugins # chmod -R a+w /app/revive-adserver/var/templates_compiled # chmod -R a+w /app/revive-adserver/plugins # chmod -R a+w /app/revive-adserver/www/admin/plugins # chmod -R a+w /app/revive-adserver/www/images  再びインストール画面へ戻って&amp;rdquo;Retry&amp;rdquo;を押すと、次のステップへ進めます。</description>
    </item>
    
    <item>
      <title>PHPからfitbit API を使ってみる</title>
      <link>https://sankame.github.io/blog/2014-02-04-php_fitbit_api/</link>
      <pubDate>Tue, 04 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-02-04-php_fitbit_api/</guid>
      <description>&amp;nbsp;更新日：2015年02月08日
0.環境 [CentOS] 5.6 (32bit版カーネル) [Apache] 2.2.3 [PHP] 5.4.1 [device] Fitbit One  1.OAuth Extensionインストール → fitbit API実行  (1-1) fitbit(活動量計)のAPI使用手順にそって作業を進めます。
 下記コマンドを実行。
# pecl install oauth-0.99.9  エラー発生。
： （割愛） ： /var/tmp/oauth/oauth.c:2058: warning: assignment from incompatible pointer type /var/tmp/oauth/oauth.c: In function &#39;zm_shutdown_oauth&#39;: /var/tmp/oauth/oauth.c:2092: warning: implicit declaration of function &#39;curl_global_cleanup&#39; make: *** [oauth.lo] エラー 1 ERROR: `make&#39; failed  こんな情報を見つけ、下記コマンドを実行。
# yum install curl-devel  エラーは変わらず、さらにこんな情報を見つけ、下記コマンドを実行。
# yum install pcre pcre-devel   またまたエラー発生・・・</description>
    </item>
    
    <item>
      <title>PHPメモ</title>
      <link>https://sankame.github.io/blog/2014-02-02-php_sample/</link>
      <pubDate>Sun, 02 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2014-02-02-php_sample/</guid>
      <description> PHPメモ (自分用) (1) extensionが追加されたかコマンドラインで確認  下記は例。OAuthの部分は任意のextension名に置き換える。
# php -r &amp;quot;echo phpinfo();&amp;quot;|grep OAuth OAuth OAuth support =&amp;gt; enabled   </description>
    </item>
    
    <item>
      <title>Smartyで3点リーダー(省略)表現</title>
      <link>https://sankame.github.io/blog/2013-05-12-smarty_ellipses/</link>
      <pubDate>Sun, 12 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2013-05-12-smarty_ellipses/</guid>
      <description> 10文字以上の場合、9文字目を…にして残りを切り捨てる。 (半角、全角ともに1文字として扱う) {if mb_strlen($keyword) &amp;gt; 9} {assign var=cutKeyword value=$keyword|mb_substr:0:8|cat:&#39;…&#39;} {else} {assign var=cutKeyword value=$keyword} {/if} &amp;lt;a class=&amp;quot;keyword-link&amp;quot; href=&amp;quot;#&amp;quot; title=&amp;quot;{$keyword}&amp;quot;&amp;gt;{$cutKeyword}&amp;lt;/a&amp;gt;  上記コードで各文字列を変換した場合。 (&amp;ldquo;→&amp;rdquo; は変換前後を表す) １２３４５６７８　→　１２３４５６７８ １２３４５６７８９　→　１２３４５６７８９ １２３４５６７８９Ａ　→　１２３４５６７８… 123456789 →　123456789 123456789A →　12345678…  </description>
    </item>
    
    <item>
      <title>PHPでMeCabを利用</title>
      <link>https://sankame.github.io/blog/2013-04-29-php_mecab/</link>
      <pubDate>Mon, 29 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2013-04-29-php_mecab/</guid>
      <description>0.環境 [CentOS] 5.6 (32bit版カーネル) [PHP] 5.3.3  1.MeCabインストール  まずは下記の手順でMeCabをインストール。
MeCabインストール方法
  2.php_mecabインストール # wget -O php_mecab-0.5.zip https://nodeload.github.com/rsky/php-mecab/zip/master --no-check-certificate # # unzip php_mecab-0.5.zip # # mv -f php-mecab-master php_mecab-0.5 # # cd php_mecab-0.5/mecab # # phpize # # ./configure # # make # # make test # # make install  3.テスト  インストールが成功したら、phpからテストします。
(Apache経由で動かす場合はhttpdを再起動して下さい)
# echo &amp;quot;extension=mecab.so&amp;quot; &amp;gt; /etc/php.d/mecab.ini # vim mecabtest.php    4.作成したphpファイルを実行 # php mecabtest.</description>
    </item>
    
    <item>
      <title>PHPサンプル isset関数化</title>
      <link>https://sankame.github.io/blog/2012-12-28-php_sample_viaisset/</link>
      <pubDate>Fri, 28 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2012-12-28-php_sample_viaisset/</guid>
      <description> &amp;ldquo;Undefined index&amp;rdquo; Noticeを防ぐためのissetが冗長なので関数化。  </description>
    </item>
    
  </channel>
</rss>