<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UnitTest on プログラマー備忘録</title>
    <link>https://sankame.github.io/tags/unittest/</link>
    <description>Recent content in UnitTest on プログラマー備忘録</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 05 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sankame.github.io/tags/unittest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>品質管理とUnitTest(Laravel&#43;PHPUnit&#43;Mockeryによるサンプルコード付き)</title>
      <link>https://sankame.github.io/blog/2020-05-05-laravel_phpunit_mockery/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://sankame.github.io/blog/2020-05-05-laravel_phpunit_mockery/</guid>
      <description>環境 [OS] Debian 10
[PHP] 7.3.13
[Laravel] 7.6.2
[PHPUnit] 8.5.3
[Mockery] 1.3.1
はじめに ソフトウェアやアプリケーション開発にとって品質管理は切っても切り離せない存在です。 日本の従来の品質管理は散布図やPB曲線などを用いて定量化を重視してきました。
しかし、それらは品質を数値化し分析することに寄りすぎていると感じるのは僕だけでしょうか？ 品質管理の本来の目的は「品質を上げること」にあるはずです。
一言で品質と言っても様々ですが、「品質 = 要求仕様に則った実装」と定義すると、品質向上のための必要十分な施策はUnitTestによるホワイトボックステストが一番の近道だと考えています。 実際、ネットの情報を見ても、Googleなどのテック企業はUnitTestを中心に据えているように見えます。 その上で、報告などの目的でどうしても品質を定量化したいのであれば、UnitTestのカバレッジ計測ツールを使ったら良いのではないでしょうか。
1. 方針 下記の方針でユニットテストを書いていきますが、自分のプロジェクトと合わない部分は変えて下さい。
 1-1. 後々CIで動かすことも考慮し、DB接続はモックで代替する。 1-2. フレームワークを含めず実装した箇所だけのテストコードを書く。 1-3. プロダクションコードの全ロジックを通すテストコードを書く。(「3. テスト記載方法」で後述) 1-4. 上記1-2の範囲でツールを用いてカバレッジを計測し、なるべく100%に近づける。(一般的にツールは評価が甘めのため) 1-5. テストコードの構成はフレームワークやデファクトスタンダードに合わせる。  2. 設定 2-1. PHPUnit  LaravelにはPHPUnitが最初から入ってるので、アプリのルートで下記コマンドを実行するとサンプルのテストコードが実行されます。
composer exec -v phpunit  アプリルートにあるtestsディレクトリにテストコードを格納していきます。同ディレクトリ内はさらにFeatureとUnitに分かれてます。
tests |-- CreatesApplication.php |-- Feature | `-- ExampleTest.php |-- TestCase.php `-- Unit `-- ExampleTest.php   Laravelの方針に合わせて、下記の区分けでテストを書いていきます。
 Feature</description>
    </item>
    
  </channel>
</rss>